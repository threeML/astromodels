{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f19715be",
   "metadata": {
    "papermill": {
     "duration": 0.003021,
     "end_time": "2025-10-01T20:08:46.014001",
     "exception": false,
     "start_time": "2025-10-01T20:08:46.010980",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Beta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d7c9b2ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T20:08:46.022010Z",
     "iopub.status.busy": "2025-10-01T20:08:46.021746Z",
     "iopub.status.idle": "2025-10-01T20:08:48.587637Z",
     "shell.execute_reply": "2025-10-01T20:08:48.586875Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.572721,
     "end_time": "2025-10-01T20:08:48.589791",
     "exception": false,
     "start_time": "2025-10-01T20:08:46.017070",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8d51fdda",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T20:08:48.593684Z",
     "iopub.status.busy": "2025-10-01T20:08:48.593255Z",
     "iopub.status.idle": "2025-10-01T20:08:48.598812Z",
     "shell.execute_reply": "2025-10-01T20:08:48.598159Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.00902,
     "end_time": "2025-10-01T20:08:48.600283",
     "exception": false,
     "start_time": "2025-10-01T20:08:48.591263",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c71e456d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T20:08:48.603835Z",
     "iopub.status.busy": "2025-10-01T20:08:48.603662Z",
     "iopub.status.idle": "2025-10-01T20:08:48.607447Z",
     "shell.execute_reply": "2025-10-01T20:08:48.606943Z"
    },
    "papermill": {
     "duration": 0.007161,
     "end_time": "2025-10-01T20:08:48.608843",
     "exception": false,
     "start_time": "2025-10-01T20:08:48.601682",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Beta\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4161489f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T20:08:48.612426Z",
     "iopub.status.busy": "2025-10-01T20:08:48.612250Z",
     "iopub.status.idle": "2025-10-01T20:08:48.620043Z",
     "shell.execute_reply": "2025-10-01T20:08:48.619461Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011354,
     "end_time": "2025-10-01T20:08:48.621591",
     "exception": false,
     "start_time": "2025-10-01T20:08:48.610237",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad4deba5",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001276,
     "end_time": "2025-10-01T20:08:48.624380",
     "exception": false,
     "start_time": "2025-10-01T20:08:48.623104",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "21219c24",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T20:08:48.629393Z",
     "iopub.status.busy": "2025-10-01T20:08:48.629211Z",
     "iopub.status.idle": "2025-10-01T20:08:48.633805Z",
     "shell.execute_reply": "2025-10-01T20:08:48.633359Z"
    },
    "papermill": {
     "duration": 0.00911,
     "end_time": "2025-10-01T20:08:48.634999",
     "exception": false,
     "start_time": "2025-10-01T20:08:48.625889",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A beta distribution function</li>\n",
       "\n",
       "<li>formula: $ f(x, a, b)=\\frac{\\Gamma(a+b) x^{a-1}(1-x)^{b-1}}{\\Gamma(a) \\Gamma(b)}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.5</li>\n",
       "\n",
       "<li>desc: first shape parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.05</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.5</li>\n",
       "\n",
       "<li>desc: second shape parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.05</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A beta distribution function\n",
       "  * formula: $ f(x, a, b)=\\frac{\\Gamma(a+b) x^{a-1}(1-x)^{b-1}}{\\Gamma(a) \\Gamma(b)}$\n",
       "  * parameters:\n",
       "    * a:\n",
       "      * value: 0.5\n",
       "      * desc: first shape parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.05\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 0.5\n",
       "      * desc: second shape parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.05\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6b467a5",
   "metadata": {
    "papermill": {
     "duration": 0.001269,
     "end_time": "2025-10-01T20:08:48.637779",
     "exception": false,
     "start_time": "2025-10-01T20:08:48.636510",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "83f5719b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T20:08:48.641071Z",
     "iopub.status.busy": "2025-10-01T20:08:48.640894Z",
     "iopub.status.idle": "2025-10-01T20:08:48.801842Z",
     "shell.execute_reply": "2025-10-01T20:08:48.798252Z"
    },
    "papermill": {
     "duration": 0.164386,
     "end_time": "2025-10-01T20:08:48.803384",
     "exception": false,
     "start_time": "2025-10-01T20:08:48.638998",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "726f158c",
   "metadata": {
    "papermill": {
     "duration": 0.001565,
     "end_time": "2025-10-01T20:08:48.806807",
     "exception": false,
     "start_time": "2025-10-01T20:08:48.805242",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1402fba3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T20:08:48.818550Z",
     "iopub.status.busy": "2025-10-01T20:08:48.817549Z",
     "iopub.status.idle": "2025-10-01T20:08:49.324490Z",
     "shell.execute_reply": "2025-10-01T20:08:49.283966Z"
    },
    "papermill": {
     "duration": 0.520693,
     "end_time": "2025-10-01T20:08:49.331136",
     "exception": false,
     "start_time": "2025-10-01T20:08:48.810443",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4.705965,
   "end_time": "2025-10-01T20:08:49.979504",
   "environment_variables": {},
   "exception": null,
   "input_path": "Beta.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Beta.ipynb",
   "parameters": {
    "func_name": "Beta",
    "positive_prior": true
   },
   "start_time": "2025-10-01T20:08:45.273539",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}