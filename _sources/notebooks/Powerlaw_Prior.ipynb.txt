{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ab1c7d8b",
   "metadata": {
    "papermill": {
     "duration": 0.001564,
     "end_time": "2025-09-23T20:05:04.821176",
     "exception": false,
     "start_time": "2025-09-23T20:05:04.819612",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a8cfe3b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T20:05:04.824300Z",
     "iopub.status.busy": "2025-09-23T20:05:04.824098Z",
     "iopub.status.idle": "2025-09-23T20:05:06.979315Z",
     "shell.execute_reply": "2025-09-23T20:05:06.978193Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.161935,
     "end_time": "2025-09-23T20:05:06.984324",
     "exception": false,
     "start_time": "2025-09-23T20:05:04.822389",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a6d4bcaa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T20:05:06.992721Z",
     "iopub.status.busy": "2025-09-23T20:05:06.991863Z",
     "iopub.status.idle": "2025-09-23T20:05:06.996645Z",
     "shell.execute_reply": "2025-09-23T20:05:06.995758Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.01018,
     "end_time": "2025-09-23T20:05:06.998963",
     "exception": false,
     "start_time": "2025-09-23T20:05:06.988783",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b5924b54",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T20:05:07.006383Z",
     "iopub.status.busy": "2025-09-23T20:05:07.005910Z",
     "iopub.status.idle": "2025-09-23T20:05:07.009929Z",
     "shell.execute_reply": "2025-09-23T20:05:07.008847Z"
    },
    "papermill": {
     "duration": 0.011424,
     "end_time": "2025-09-23T20:05:07.013611",
     "exception": false,
     "start_time": "2025-09-23T20:05:07.002187",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "738db3d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T20:05:07.022507Z",
     "iopub.status.busy": "2025-09-23T20:05:07.021993Z",
     "iopub.status.idle": "2025-09-23T20:05:07.028472Z",
     "shell.execute_reply": "2025-09-23T20:05:07.026871Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.013245,
     "end_time": "2025-09-23T20:05:07.030557",
     "exception": false,
     "start_time": "2025-09-23T20:05:07.017312",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c32952ac",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001266,
     "end_time": "2025-09-23T20:05:07.033280",
     "exception": false,
     "start_time": "2025-09-23T20:05:07.032014",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b4df3ee9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T20:05:07.037280Z",
     "iopub.status.busy": "2025-09-23T20:05:07.036870Z",
     "iopub.status.idle": "2025-09-23T20:05:07.048035Z",
     "shell.execute_reply": "2025-09-23T20:05:07.047027Z"
    },
    "papermill": {
     "duration": 0.015982,
     "end_time": "2025-09-23T20:05:07.050451",
     "exception": false,
     "start_time": "2025-09-23T20:05:07.034469",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df8bf43d",
   "metadata": {
    "papermill": {
     "duration": 0.001577,
     "end_time": "2025-09-23T20:05:07.053687",
     "exception": false,
     "start_time": "2025-09-23T20:05:07.052110",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e67af036",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T20:05:07.061366Z",
     "iopub.status.busy": "2025-09-23T20:05:07.061170Z",
     "iopub.status.idle": "2025-09-23T20:05:07.139962Z",
     "shell.execute_reply": "2025-09-23T20:05:07.139638Z"
    },
    "papermill": {
     "duration": 0.08622,
     "end_time": "2025-09-23T20:05:07.141165",
     "exception": false,
     "start_time": "2025-09-23T20:05:07.054945",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA4AAAAMICAYAAACZ14viAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8fJSN1AAAACXBIWXMAAA9hAAAPYQGoP6dpAAAxzUlEQVR4nO3dCXSX1Z34/08QEKFS64JTwWXsAi5AHesK2HGt1dGpWuu+1KWl4kBrLe5KQaT2tAodbd1wqeO+trXqnFFHj7jgdqpoodXaFrQqggvKKiT/c5/5Jz9AsCwh34TP63VOTsjz/Sa54TwnyTv3Pvepa2hoaAgAAABWe+1qPQAAAABahgAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACCJ9rUeQFv20ksvxbx586Jdu3ax5ppr1no4AABAQnPnzo36+vro2LFjbLXVVp/4XAG4Ekr8lf/o8jJ//vxaDwcAAEjeJ/+IAFwJZeavxF95vdZaa9V6OAAAQEKzZ89u6pJ/RACuhLLss8z8lfjr1atXrYcDAAAkNGnSpJg5c+YyXZZmExgAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkmg1AfjOO+/ElltuWb1emoaGhhgzZkz069cvttlmmzj55JNj2rRpS3zuq6++Gn379o37779/FY4aAACg7WgVATh16tQYOXJkLFiw4BOfN3bs2Ljpppti+PDhcf3118ecOXPipJNO+tjzysc5/fTTq8cBAAD4P+2jxs4999y45ZZb/uHzyuzfNddcE4MHD47dd9+9OlZCcNddd40JEyZE7969FwnFTp06rdJxAwAAtDU1nwEcOHBg3H333XH++ed/4vNeeeWVarnngAEDmo5ttNFG0aNHj3jyySebjv3pT3+qArDMKAIAANCKZgBLxJWXGTNmfOLzJk+eHO3atYvu3bsvcnzDDTeM6dOnV/+eP39+tfSzzBJuvPHGzTK+/v37L/WxIUOGxOabb94snwcAAGC1nwFcVjNnzoyOHTtWEbiwzp07V48Vl112WXTp0iUOP/zwGo0SAACg9ar5DOCy6tq1a8ydOzfq6+sXicByrDw2ceLEuO666+LOO++Murq6Zvu848aNW+pjkyZNaopPAACA1q7NzAB269at2gjmzTffXOR4ebssIR0/fnx8+OGHsc8++1QbwjRuCnPqqafGwQcfXKNRAwAAtB5tZgawV69escEGG8Rjjz3WFHRTpkyprg0s1+mts846i2wQU5QYHDp0aOy22241GjUAAEDr0aoD8K233mra6KUs+zzssMNi9OjR1Wxguc3DBRdcUMXdpptuWj3v05/+9Mc+Rnlu2SkUAAAgu1YdgGX5ZlFu+t54y4jZs2dXs3offfRRFX/Dhg2r8SgBAADahrqGcmEdK6RxE5iy82hZogoAANCau6TNbAIDAADAyhGAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCRaTQC+8847seWWW1avl6ahoSHGjBkT/fr1i2222SZOPvnkmDZtWtPj8+fPj4svvjh22WWX2HrrrWOfffaJe++9t4W+AgAAgNatVQTg1KlTY+TIkbFgwYJPfN7YsWPjpptuiuHDh8f1118fc+bMiZNOOqnp8V/84hdx4403xumnnx633357fPWrX41TTjklXnrppRb4KgAAAFq39rUewLnnnhu33HLLP3xemf275pprYvDgwbH77rtXx0oI7rrrrjFhwoTo3bt33HrrrXHiiSdWM39Fr1694oknnoibb745RowYscq/FgAAgNas5jOAAwcOjLvvvjvOP//8T3zeK6+8Ui33HDBgQNOxjTbaKHr06BFPPvlkzJ07N9ZYY43o27fvIu+33nrrxdtvv73Kxg8AANBW1HwGsERceZkxY8YnPm/y5MnRrl276N69+yLHN9xww5g+fXqsueaa8cgjjyzy2N/+9rd4/PHH49hjj10lYwcAAGhLah6Ay2rmzJnRsWPHKgIX1rlz5+qxxT3wwAPV8tJ11103jjvuuBX+vP3791/qY0OGDInNN998hT82AABAqiWgy6pr167VMs/6+vpFjpdj5bFGZRfRQYMGVS99+vSpri9ce+21azBiAACA1qXNzAB269at2gjmzTffrJaMNipv77333tW/p0yZEkcddVQViZdccknsueeeK/15x40bt9THJk2atMTZRwAAgNaozcwAlh09N9hgg3jssceajpXgK9cGNi7TLEs+11prrWpTmeaIPwAAgNVJq54BfOutt5o2einX/h122GExevToajawU6dOccEFF8Ruu+0Wm266abX0s9zyodzu4YMPPqheGpXnlo8BAACQWasOwFNPPbV6XW763njLiNmzZ8fQoUPjo48+quJv2LBh1WOvvfZatUT07LPP/tjH2X777Zs+BgAAQFZ1DaWaWCGN1wB26dKlWqIKAADQmrukzVwDCAAAwMoRgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgiRUKwHPOOSeeffbZ5h8NAAAArSsAf/e738WRRx4Ze+65Z1xyySUxZcqU5h8ZAAAAtQ/AJ554IkaPHh1bbLFFXHXVVbHXXnvFYYcdFrfddlt8+OGHzTtCAAAAmkVdQ0NDw8p8gFmzZsWDDz4Y9913X4wbNy7WWGON2HfffasZwl69esXqbNKkSTFz5szo0qXLav+1AgAAbb9LVnoTmM6dO8cee+wR++yzT3zpS1+K2bNnx5133hkHHHBAHH/88TF58uSV/RQAAAA0gxUOwDlz5lSzfoMHD46ddtopfvjDH8b8+fNjxIgRMX78+Bg7dmy8++671XEAAABqr/2KvNP3vve9eOSRR6rZvu7du8dxxx0XX//612OTTTZpes7OO+8cJ554ogAEAABoywH46KOPxte+9rVqmed222231OeVTWIuvPDClRkfAAAAtQzAiy66KLbZZpvo2rXrxx577733quv++vTpE5tttln1AgAAQBu9BnDgwIExYcKEJT72+OOPVzuAAgAA0EZnAK+99trqpSh3jijX9nXs2PFjzysbv6y//vrNO0oAAABaLgB79OhR7fZZ3HXXXdX9JTbccMOPPa/ce6JcGwgAAEAbDcByr7/yUrz22mvx/e9/P3r37r0qxwYAAEAtArC+vj7atfu/Swavu+66pmNL0/hcAAAA2lgAbrXVVnHVVVdFv379Ysstt4y6urqlPrc89oc//KG5xggAAEBLBuCgQYOabvRe/v1JAQgAAEDrU9dQtvRkhUyaNClmzpxZbXxTNsUBAABozV2yzDOATzzxxHINonHHUAAAAFqHZQ7Ab33rW9Wyz0+aMGx8vLyeOHFic40RAACAlgzAX/3qV83x+QAAAGjtAbj99tuv2pEAAADQOgJwzJgxccABB1Q7gZZ/f5KyBHTw4MHNMT4AAABaOgB/+ctfxrbbblsFYPn3JxGAAAAAbTgAy9aiS/o3AAAAq1kALsncuXPjz3/+c8ybNy969OgR66+/fvONDAAAgNoHYLnVw+jRo6udQefMmdN0/HOf+1x873vfiz322KM5xwgAAECtAvCKK66Iyy+/PP71X/819tlnn1h33XXjzTffjN/97nfxH//xHzFq1Kj4+te/3hzjAwAAoJYBeMstt1Q7gpbQW9g3vvGN+MEPflDFoQAEAABoXdqtyDtNmzatmv1bkr322itef/31lR0XAAAArSEAe/bsGX/84x+X+Nhrr70Wm2222cqOCwAAgNYQgKeddlrccMMNcffdd1c7gBbl9T333BPXXHNNnH766c09TgAAAFZSXUPZ0nMZ9OrVq7rBe6PGdyvHPvWpT8WsWbOivr4+2rdvX739xBNPLNdA3nnnnejfv3+MGzeu2lRmScrn/PnPfx633npr9fn69esXw4YNW+T2EyVMr7rqqnj33XfjS1/6Upx33nnxz//8z7EqlPshzpw5M7p06VL9/wAAALS05emSZd4E5oILLlgkAJvT1KlT48ILL4wFCxZ84vPGjh0bN910U4wcOTI23HDD6lYUJ510UhWExX333Rc/+clP4kc/+lH1hZfZyOOPPz7uvffe6NSp0yoZOwAAQFuxzAF44IEHLvNMXrkOcFmde+651a6i/0iZ/StBN3jw4Nh9992rY8OHD49dd901JkyYEL17964C8cgjj2zagbSE4I477hgPP/xw7L333rE6q69viBkf1Nd6GAAAkEbXtdtFu3arZpKsVd0GopgxY0a1Ecz8+fMXOf7kk0/GddddF7///e+X6eMMHDgwDjvssHjxxRfj7LPPXurzXnnllWr30QEDBjQd22ijjaJHjx7V5yzLPF966aU49dRTmx4vs359+vSpHl/dA7DE34HHvVHrYQAAQBp3Xv3ZWOfTa8RqH4DPPvtsnHDCCTFnzpwlPr7zzjsv88cqEVdeSlB+ksmTJ0e7du2ie/fuixwvS0GnT59ezTqWaxA33njjJT6+osp1iUszZMiQ2HzzzVf4YwMAALT6ALz00kurWz0MHTo0br755ujQoUMcdNBB8dhjj8X//M//xJgxY5p9oOWixo4dO1YRuLDOnTtXj5WXYvFr/crjKxOAAAAAqQOwLLU844wzYqeddooPPvggfvWrX1X/Li9vv/12/OIXv6jisDl17do15s6dW83yLRyB5Vh5rLwUs2fPXuT9yu0pGh9bEWVX0n+02w4AAMBqG4AlqsrMWlGWZP71r39teqxsyjJq1KhmD8Bu3bpVG8G8+eab1ZLRRuXtcn3fBhtsUL39xhtvVNcFNipvb7nllpHhAtSyBhkAAGi538FTBOAXvvCFeOCBB2KvvfaKTTfdtGnnzxJe77//fjUr2NzKbR1K5JVlpgcffHB1bMqUKdW1geU6vXXWWafa8KXM2G233XbV4x9++GE8//zz8e1vfztWd2X3obZ2ASoAANAGAvDEE0+sNkAps2vXX399bL/99tWmMGWHzt/85jex7bbbNsvg3nrrraaNXMqyz7JbaLn3X5kNLNf6lXsT7rbbblWEFkcccUR164eePXvGZz/72eqm8eVaxXIrCAAAgOxWKAD33HPPuPHGG+Pll1+u3h4xYkScdtppcfvtt1ezcOX+fM2h8ZYOJTIbbxlRrvEry0s/+uijKv6GDRvW9Pxy/78yG1mWoJZZyB122CEuu+yyj20cAwAAkFFdQ7mwjhXSuAlMly5dqiWqAAAArblLVvhG8OWm7OUWEGVH0LIpTNkMptz/b3W/4ToAAEBbtUIBWJZ+HnXUUfHee+/FJptsEuuuu248+uijceutt8YWW2wRV155Zay//vrNP1oAAABaNgB//OMfVzdlv+OOO2KrrbZqOv7ss89Wm8OUa/B+9rOfrfioAAAAaHYrtDtKCb1BgwYtEn9F2f3zu9/9bjzyyCPNNT4AAABqGYBrrbVW9bIk6623nl03AQAAWqEVKrX99tuv2gBmwYIFixwvG4redtttNoIBAABoy9cAXnLJJU3/Ljdhf/HFF2Pfffet7glYNnwp99974IEHYurUqdGvX79VNV4AAABW9X0Ay03Xl/mD1tXFgw8+GKs79wEEAABWy/sAPvTQQ80xNgAAAGpkhW8EX/zhD3+I5557LmbNmhXdunWrbgRfXgMAALCaBGDZ/GXo0KFx7733Vhu/NH2w9u2rG8SfdtppzTlGAAAAahWAV155ZbXhy9lnn11tAvOpT30qXn/99bjnnnvi6quvrm4FccIJJzTH+AAAAKhlAN5xxx3x7W9/O4444oimY1/4whfi+9//fjULePvttwtAAACA1eE+gG+88Ub07NlziY9tscUW1WwgAAAAq0EAbrjhhjFx4sQlPvbyyy9H165dV3ZcAAAAtIYA3H///eOKK66IG2+8MebMmdO0MUzZFKYcL9cFAgAAsBpcAzho0KB49dVXY/jw4XH++efHOuusEzNmzKgisG/fvnHqqac2/0gBAABo+QAsG72MGTMmnnnmmXjsscdi2rRp1U6g2267bey2227Rrt0KTSwCAADQmgLwo48+ivPOOy+OOeaY+PKXv1y9AAAA0Pot91Rdhw4d4umnn47nnntu1YwIAACAVWKF1moOHTo0LrvssnjhhReaf0QAAAC0nmsAL7300pg5c2Yccsgh1S0f1lprrUUer6uri//93/9trjECAABQqwAsN3svLwAAAKzmAThq1KjmHwkAAACtLwCLefPmxf33319dBzh79uxYb731qttAfOUrX2neEQIAAFC7AJw6dWocd9xx8corr1TX/3Xp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AACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIouYBOG/evDjvvPNihx12iO222y7OPPPMmDlz5hKfO2vWrOrx8rxtt902Bg0aFFOnTl3kOc8991wccsgh0adPn9hll13iiiuuaKGvBAAAoHWreQCOGjUqHn/88Rg9enQVa5MmTYqzzjpric8dOXJkPPnkk/HTn/40rr766pg9e3YMHDgw6uvrq8enTJkSJ5xwQvTt2zduvfXWOP7446uPWz4+AABAdu1r+clnzJgRt912W1x66aWx0047VcfOOOOMOProo2P69Omx3nrrLfLcu+66K/7zP/8zvvKVr1THSgj269cvxo8fX73/tddeG5/73OeqWcKiV69e8fzzz1cBuPPOO9foqwQAAGgdajoDWJZrFo3xV5TZu/bt21dRt7C//vWvsWDBgthqq62ajq277rrxmc98Jp599tnq7XHjxsW+++67yPtddNFFceqpp67irwQAAKD1q+kM4OTJk6Nbt27RsWPHpmPl3yXsygzgwsqx4u23345/+qd/qv49Z86ceO+992LatGnVtYSNkViWfr7wwgvV84499tg46KCDVniM/fv3X+pjQ4YMic0333yFPzYAAECaGcCy2UunTp0+drxz584f2wime/fu1ezgmDFjqjj88MMP40c/+lEVfMX7779fvb7kkktiwIAB1TWCBxxwQJxzzjlxzz33tNBXBAAA0HrVdAawa9eu1Sze4ubOnVs9trC6urrqmr9TTjmlup6vvF1m58pun2UZaONGMGW2r8z6Fb17944JEybEHXfcEf/2b/+2QmMsy0qXpmxYs7QdSwEAAFqbmgZgWf5ZlnSW5ZuNy0Dnz59fHSszfovbZJNN4vbbb4933323Cr6yLHTHHXesrgssEbjGGmt8bEnm5z//+bjvvvta7GsCAABorWq6BLTc+6+hoSGeeeaZpmNPP/10dazc62/xewDutdde1eYwJfbKDqHllhBltrB8nBKQW2yxRUycOHGR93v55ZddpwcAAFDrGcCyzHP//fePESNGxPDhw6vIGzZsWBx66KHVdYDlWr+yRLTMBpa3y4xf2dVz6NCh1SxgeZ9jjjkm1l577erjnXjiidWOn+VWECUKSyw+8MADcdNNN9XyywQAAGgV6hrKdFsNlZu5lxu8l2Wa5fYP++23X5x22mnRoUOHOP300+Opp56Khx56qHru3//+9yr6ym0fyuMHHnhgdU1gu3b/byLzN7/5TXVfwddffz0222yzaqfOPffcc5WMvfEawC5dulT3HAQAAGhpy9MlNQ/AtkwAAgAAbalLanoNIAAAAC1HAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEASAhAAACAJAQgAAJCEAAQAAEhCAAIAACQhAAEAAJIQgAAAAEkIQAAAgCQEIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAk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whH4Sb9T1ZoAbEPKsoZyzVWJuMblDWVJVTm2+LTzBhtsUL1+4403qjXIjcrbZStbcluec6lxydVRRx1VfXMrO6aVLbNhec6j8st5uTa53EJkYaeeemo1g1N2ciSv5TmXyvXHxeabb77I8c9//vOuS05uec6jsuzzqaeeqm6X1fhHg3KboxdffLG6pYgAZHnOu3IbiDfffLNaNtqovL333ntHa2QJaBtSrsEqJ9jCS1yefvrp6tji69XXWWed6i+i48aNazpWfvl6/vnno3///i06btr2uVSce+651TKZ8td18ceKnEcHHHBA3HPPPdU51PhSDB06tPqLO7ktz7lUrh8tEVhmlRf28ssvfywKyWV5zqOlbetfwrFc+w7LqlevXtXEy2OPPbbIH87LtYGt9XduM4BtSJlGLuvUR4wYUd1nZNasWTFs2LA49NBDq3XG5ULTsvSh8a9cZTe0H/3oR9GzZ8/47Gc/Gz//+c9js802ix133LHWXwpt6FwqSz+feOKJ6rkffPBB9dKoXGtRLnImp+U5j8o1NUu6rqb85XThVQrktDznUlliVe5pe+mll1a/dJVVLffff38VgOXnHHktz3lUfmn/4he/WP2e9MMf/rD6WVZ+1j344INx1VVX1fpLoZV76623qtflvCnfk8reCOXek+VnWvnd6IILLojddtstNt1002iN6sq9IGo9CJZduaavbJ9ebvJetjUuN8E97bTTokOHDtXuemU5w8I7oV199dVxzTXXVL+0l7+MlW+IfmFnec6lF154IQ4++OAlfoztt9++umievJb3e9LCyh+nxowZ02qXyNC6z6Vrr722einbr5df5stz7d7I8pxH5dwpfzQo1/6VW0KUGeRyXeAee+xR6y+DVmT8+PFx9NFHV38gKBvgFeWymKLxd6Ayo1xWs5TLGT766KMq/sofHz71qU9FayQAAQAAknANIAAAQBICEAAAIAkBCAAAkIQABAAASEIAAgAAJCEAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAC3shhtuiJ49e8bYsWObjr388sux9dZbxxlnnFHTsQGweqtraGhoqPUgACCT8qP36KOPjgkTJsQ999wTG220URx22GHx5ptvVm+vvfbatR4iAKspAQgANTB58uTYf//9Y7vttosBAwbEyJEj48orr4xddtml1kMDYDUmAAGgRq677rq44IILon379vH1r3+9ikAAWJVcAwgANXLQQQdFp06dYv78+XHkkUfWejgAJCAAAaBGfvazn0V9fX11zd+oUaOqawMBYFUSgABQA+PHj4+bbropvv3tb8fQoUOrt2+88cZaDwuA1ZxrAAGghc2aNavaAGaNNdaI3/72t9GhQ4c46qij4qWXXqre7tGjR62HCMBqygwgANRg6eeUKVNi2LBh0bFjx6irq4sRI0bEggUL4qyzzrIUFIBVxgwgAABAEmYAAQAAkhCAAAAASQhAAACAJAQgAABAEgIQAAAgCQEIAACQhAAEAABIQgACAAAkIQABAACSEIAAAABJCEAAAIAkBCAAAEDk8P8BgvdJv6X58SYAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75f79123",
   "metadata": {
    "papermill": {
     "duration": 0.001578,
     "end_time": "2025-09-23T20:05:07.144477",
     "exception": false,
     "start_time": "2025-09-23T20:05:07.142899",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d7a9e6ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T20:05:07.148246Z",
     "iopub.status.busy": "2025-09-23T20:05:07.148084Z",
     "iopub.status.idle": "2025-09-23T20:05:07.471011Z",
     "shell.execute_reply": "2025-09-23T20:05:07.470288Z"
    },
    "papermill": {
     "duration": 0.326212,
     "end_time": "2025-09-23T20:05:07.472131",
     "exception": false,
     "start_time": "2025-09-23T20:05:07.145919",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.678538,
   "end_time": "2025-09-23T20:05:07.904359",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2025-09-23T20:05:04.225821",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}