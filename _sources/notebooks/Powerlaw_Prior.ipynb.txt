{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ee92741d",
   "metadata": {
    "papermill": {
     "duration": 0.001958,
     "end_time": "2025-10-03T21:30:09.975720",
     "exception": false,
     "start_time": "2025-10-03T21:30:09.973762",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c4797cf0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T21:30:09.985367Z",
     "iopub.status.busy": "2025-10-03T21:30:09.985110Z",
     "iopub.status.idle": "2025-10-03T21:30:12.325973Z",
     "shell.execute_reply": "2025-10-03T21:30:12.325336Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.349175,
     "end_time": "2025-10-03T21:30:12.327359",
     "exception": false,
     "start_time": "2025-10-03T21:30:09.978184",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e3680b1a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T21:30:12.330775Z",
     "iopub.status.busy": "2025-10-03T21:30:12.330401Z",
     "iopub.status.idle": "2025-10-03T21:30:12.332881Z",
     "shell.execute_reply": "2025-10-03T21:30:12.332486Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.005222,
     "end_time": "2025-10-03T21:30:12.333954",
     "exception": false,
     "start_time": "2025-10-03T21:30:12.328732",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1ecc38cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T21:30:12.337040Z",
     "iopub.status.busy": "2025-10-03T21:30:12.336886Z",
     "iopub.status.idle": "2025-10-03T21:30:12.339223Z",
     "shell.execute_reply": "2025-10-03T21:30:12.338486Z"
    },
    "papermill": {
     "duration": 0.005369,
     "end_time": "2025-10-03T21:30:12.340485",
     "exception": false,
     "start_time": "2025-10-03T21:30:12.335116",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "88e316e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T21:30:12.343816Z",
     "iopub.status.busy": "2025-10-03T21:30:12.343634Z",
     "iopub.status.idle": "2025-10-03T21:30:12.347103Z",
     "shell.execute_reply": "2025-10-03T21:30:12.346560Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.006617,
     "end_time": "2025-10-03T21:30:12.348410",
     "exception": false,
     "start_time": "2025-10-03T21:30:12.341793",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "858ce557",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.00108,
     "end_time": "2025-10-03T21:30:12.350742",
     "exception": false,
     "start_time": "2025-10-03T21:30:12.349662",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7d832c01",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T21:30:12.354136Z",
     "iopub.status.busy": "2025-10-03T21:30:12.353958Z",
     "iopub.status.idle": "2025-10-03T21:30:12.359922Z",
     "shell.execute_reply": "2025-10-03T21:30:12.359509Z"
    },
    "papermill": {
     "duration": 0.009318,
     "end_time": "2025-10-03T21:30:12.361187",
     "exception": false,
     "start_time": "2025-10-03T21:30:12.351869",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e790f338",
   "metadata": {
    "papermill": {
     "duration": 0.003129,
     "end_time": "2025-10-03T21:30:12.366055",
     "exception": false,
     "start_time": "2025-10-03T21:30:12.362926",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "af003cb2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T21:30:12.369554Z",
     "iopub.status.busy": "2025-10-03T21:30:12.369377Z",
     "iopub.status.idle": "2025-10-03T21:30:12.445736Z",
     "shell.execute_reply": "2025-10-03T21:30:12.445292Z"
    },
    "papermill": {
     "duration": 0.07961,
     "end_time": "2025-10-03T21:30:12.446905",
     "exception": false,
     "start_time": "2025-10-03T21:30:12.367295",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b06b1eff",
   "metadata": {
    "papermill": {
     "duration": 0.001494,
     "end_time": "2025-10-03T21:30:12.450230",
     "exception": false,
     "start_time": "2025-10-03T21:30:12.448736",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "21438a9d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T21:30:12.453566Z",
     "iopub.status.busy": "2025-10-03T21:30:12.453425Z",
     "iopub.status.idle": "2025-10-03T21:30:12.782939Z",
     "shell.execute_reply": "2025-10-03T21:30:12.780908Z"
    },
    "papermill": {
     "duration": 0.332903,
     "end_time": "2025-10-03T21:30:12.784420",
     "exception": false,
     "start_time": "2025-10-03T21:30:12.451517",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.841556,
   "end_time": "2025-10-03T21:30:13.214373",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2025-10-03T21:30:09.372817",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}