{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7a5d9a87",
   "metadata": {
    "papermill": {
     "duration": 0.001582,
     "end_time": "2025-10-03T18:32:53.357997",
     "exception": false,
     "start_time": "2025-10-03T18:32:53.356415",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3e456372",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T18:32:53.361778Z",
     "iopub.status.busy": "2025-10-03T18:32:53.361606Z",
     "iopub.status.idle": "2025-10-03T18:32:55.752647Z",
     "shell.execute_reply": "2025-10-03T18:32:55.751108Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.397203,
     "end_time": "2025-10-03T18:32:55.756490",
     "exception": false,
     "start_time": "2025-10-03T18:32:53.359287",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d846e46e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T18:32:55.760854Z",
     "iopub.status.busy": "2025-10-03T18:32:55.760473Z",
     "iopub.status.idle": "2025-10-03T18:32:55.762739Z",
     "shell.execute_reply": "2025-10-03T18:32:55.762351Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.005258,
     "end_time": "2025-10-03T18:32:55.763813",
     "exception": false,
     "start_time": "2025-10-03T18:32:55.758555",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "75e4ea92",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T18:32:55.767117Z",
     "iopub.status.busy": "2025-10-03T18:32:55.766949Z",
     "iopub.status.idle": "2025-10-03T18:32:55.773149Z",
     "shell.execute_reply": "2025-10-03T18:32:55.772557Z"
    },
    "papermill": {
     "duration": 0.009399,
     "end_time": "2025-10-03T18:32:55.774487",
     "exception": false,
     "start_time": "2025-10-03T18:32:55.765088",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "602c9ff3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T18:32:55.777731Z",
     "iopub.status.busy": "2025-10-03T18:32:55.777548Z",
     "iopub.status.idle": "2025-10-03T18:32:55.781289Z",
     "shell.execute_reply": "2025-10-03T18:32:55.780716Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.006818,
     "end_time": "2025-10-03T18:32:55.782620",
     "exception": false,
     "start_time": "2025-10-03T18:32:55.775802",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "675d3032",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.002402,
     "end_time": "2025-10-03T18:32:55.786387",
     "exception": false,
     "start_time": "2025-10-03T18:32:55.783985",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0ab46eec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T18:32:55.791917Z",
     "iopub.status.busy": "2025-10-03T18:32:55.791493Z",
     "iopub.status.idle": "2025-10-03T18:32:55.808891Z",
     "shell.execute_reply": "2025-10-03T18:32:55.807253Z"
    },
    "papermill": {
     "duration": 0.022725,
     "end_time": "2025-10-03T18:32:55.810611",
     "exception": false,
     "start_time": "2025-10-03T18:32:55.787886",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55a1301f",
   "metadata": {
    "papermill": {
     "duration": 0.001756,
     "end_time": "2025-10-03T18:32:55.813802",
     "exception": false,
     "start_time": "2025-10-03T18:32:55.812046",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0ab76a96",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T18:32:55.823804Z",
     "iopub.status.busy": "2025-10-03T18:32:55.823640Z",
     "iopub.status.idle": "2025-10-03T18:32:55.979423Z",
     "shell.execute_reply": "2025-10-03T18:32:55.978914Z"
    },
    "papermill": {
     "duration": 0.163182,
     "end_time": "2025-10-03T18:32:55.980705",
     "exception": false,
     "start_time": "2025-10-03T18:32:55.817523",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "907dfd43",
   "metadata": {
    "papermill": {
     "duration": 0.001616,
     "end_time": "2025-10-03T18:32:55.984055",
     "exception": false,
     "start_time": "2025-10-03T18:32:55.982439",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ab0b2c16",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T18:32:55.988569Z",
     "iopub.status.busy": "2025-10-03T18:32:55.988233Z",
     "iopub.status.idle": "2025-10-03T18:32:56.469793Z",
     "shell.execute_reply": "2025-10-03T18:32:56.462616Z"
    },
    "papermill": {
     "duration": 0.485736,
     "end_time": "2025-10-03T18:32:56.471224",
     "exception": false,
     "start_time": "2025-10-03T18:32:55.985488",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4.474175,
   "end_time": "2025-10-03T18:32:57.106915",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2025-10-03T18:32:52.632740",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}