{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "bff53b00",
   "metadata": {
    "papermill": {
     "duration": 0.001881,
     "end_time": "2025-09-27T00:21:43.188927",
     "exception": false,
     "start_time": "2025-09-27T00:21:43.187046",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3ae70f2f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:21:43.193881Z",
     "iopub.status.busy": "2025-09-27T00:21:43.193654Z",
     "iopub.status.idle": "2025-09-27T00:21:47.202777Z",
     "shell.execute_reply": "2025-09-27T00:21:47.201027Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 4.020942,
     "end_time": "2025-09-27T00:21:47.211316",
     "exception": false,
     "start_time": "2025-09-27T00:21:43.190374",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f9951abd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:21:47.222566Z",
     "iopub.status.busy": "2025-09-27T00:21:47.221674Z",
     "iopub.status.idle": "2025-09-27T00:21:47.230043Z",
     "shell.execute_reply": "2025-09-27T00:21:47.228210Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.017359,
     "end_time": "2025-09-27T00:21:47.234752",
     "exception": false,
     "start_time": "2025-09-27T00:21:47.217393",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c14235e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:21:47.239867Z",
     "iopub.status.busy": "2025-09-27T00:21:47.239295Z",
     "iopub.status.idle": "2025-09-27T00:21:47.244458Z",
     "shell.execute_reply": "2025-09-27T00:21:47.242643Z"
    },
    "papermill": {
     "duration": 0.011343,
     "end_time": "2025-09-27T00:21:47.248041",
     "exception": false,
     "start_time": "2025-09-27T00:21:47.236698",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "77f645a1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:21:47.263684Z",
     "iopub.status.busy": "2025-09-27T00:21:47.263160Z",
     "iopub.status.idle": "2025-09-27T00:21:47.278309Z",
     "shell.execute_reply": "2025-09-27T00:21:47.276547Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.026228,
     "end_time": "2025-09-27T00:21:47.282980",
     "exception": false,
     "start_time": "2025-09-27T00:21:47.256752",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82aa6a16",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001484,
     "end_time": "2025-09-27T00:21:47.287273",
     "exception": false,
     "start_time": "2025-09-27T00:21:47.285789",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "daebea23",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:21:47.294364Z",
     "iopub.status.busy": "2025-09-27T00:21:47.294137Z",
     "iopub.status.idle": "2025-09-27T00:21:47.301919Z",
     "shell.execute_reply": "2025-09-27T00:21:47.300710Z"
    },
    "papermill": {
     "duration": 0.018378,
     "end_time": "2025-09-27T00:21:47.306803",
     "exception": false,
     "start_time": "2025-09-27T00:21:47.288425",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fae2f7a",
   "metadata": {
    "papermill": {
     "duration": 0.004172,
     "end_time": "2025-09-27T00:21:47.315600",
     "exception": false,
     "start_time": "2025-09-27T00:21:47.311428",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0b1fcf42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:21:47.325906Z",
     "iopub.status.busy": "2025-09-27T00:21:47.325556Z",
     "iopub.status.idle": "2025-09-27T00:21:47.623734Z",
     "shell.execute_reply": "2025-09-27T00:21:47.621404Z"
    },
    "papermill": {
     "duration": 0.305924,
     "end_time": "2025-09-27T00:21:47.625754",
     "exception": false,
     "start_time": "2025-09-27T00:21:47.319830",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2f37cf0",
   "metadata": {
    "papermill": {
     "duration": 0.003986,
     "end_time": "2025-09-27T00:21:47.634185",
     "exception": false,
     "start_time": "2025-09-27T00:21:47.630199",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9fb2e8da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:21:47.647384Z",
     "iopub.status.busy": "2025-09-27T00:21:47.646063Z",
     "iopub.status.idle": "2025-09-27T00:21:48.389150Z",
     "shell.execute_reply": "2025-09-27T00:21:48.388657Z"
    },
    "papermill": {
     "duration": 0.750795,
     "end_time": "2025-09-27T00:21:48.390406",
     "exception": false,
     "start_time": "2025-09-27T00:21:47.639611",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.777997,
   "end_time": "2025-09-27T00:21:49.135400",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2025-09-27T00:21:42.357403",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}