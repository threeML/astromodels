{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "53cc2fc7",
   "metadata": {
    "papermill": {
     "duration": 0.002862,
     "end_time": "2025-10-03T16:33:38.256671",
     "exception": false,
     "start_time": "2025-10-03T16:33:38.253809",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e45f82af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T16:33:38.265289Z",
     "iopub.status.busy": "2025-10-03T16:33:38.265059Z",
     "iopub.status.idle": "2025-10-03T16:33:40.593778Z",
     "shell.execute_reply": "2025-10-03T16:33:40.593089Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.335352,
     "end_time": "2025-10-03T16:33:40.595326",
     "exception": false,
     "start_time": "2025-10-03T16:33:38.259974",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ace543f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T16:33:40.599007Z",
     "iopub.status.busy": "2025-10-03T16:33:40.598543Z",
     "iopub.status.idle": "2025-10-03T16:33:40.601059Z",
     "shell.execute_reply": "2025-10-03T16:33:40.600668Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.005381,
     "end_time": "2025-10-03T16:33:40.602109",
     "exception": false,
     "start_time": "2025-10-03T16:33:40.596728",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "af154363",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T16:33:40.605087Z",
     "iopub.status.busy": "2025-10-03T16:33:40.604938Z",
     "iopub.status.idle": "2025-10-03T16:33:40.606867Z",
     "shell.execute_reply": "2025-10-03T16:33:40.606481Z"
    },
    "papermill": {
     "duration": 0.004599,
     "end_time": "2025-10-03T16:33:40.607957",
     "exception": false,
     "start_time": "2025-10-03T16:33:40.603358",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e38d842e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T16:33:40.610727Z",
     "iopub.status.busy": "2025-10-03T16:33:40.610568Z",
     "iopub.status.idle": "2025-10-03T16:33:40.616755Z",
     "shell.execute_reply": "2025-10-03T16:33:40.616305Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.008874,
     "end_time": "2025-10-03T16:33:40.617888",
     "exception": false,
     "start_time": "2025-10-03T16:33:40.609014",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4e2d52c",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001,
     "end_time": "2025-10-03T16:33:40.619988",
     "exception": false,
     "start_time": "2025-10-03T16:33:40.618988",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6ea7ffe1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T16:33:40.622718Z",
     "iopub.status.busy": "2025-10-03T16:33:40.622571Z",
     "iopub.status.idle": "2025-10-03T16:33:40.626779Z",
     "shell.execute_reply": "2025-10-03T16:33:40.626359Z"
    },
    "papermill": {
     "duration": 0.006899,
     "end_time": "2025-10-03T16:33:40.627848",
     "exception": false,
     "start_time": "2025-10-03T16:33:40.620949",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "846ce5fa",
   "metadata": {
    "papermill": {
     "duration": 0.001242,
     "end_time": "2025-10-03T16:33:40.630525",
     "exception": false,
     "start_time": "2025-10-03T16:33:40.629283",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "26024cd3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T16:33:40.633757Z",
     "iopub.status.busy": "2025-10-03T16:33:40.633582Z",
     "iopub.status.idle": "2025-10-03T16:33:40.748706Z",
     "shell.execute_reply": "2025-10-03T16:33:40.747898Z"
    },
    "papermill": {
     "duration": 0.138559,
     "end_time": "2025-10-03T16:33:40.770239",
     "exception": false,
     "start_time": "2025-10-03T16:33:40.631680",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2cadc8eb",
   "metadata": {
    "papermill": {
     "duration": 0.003566,
     "end_time": "2025-10-03T16:33:40.775465",
     "exception": false,
     "start_time": "2025-10-03T16:33:40.771899",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6ab3f49a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T16:33:40.779305Z",
     "iopub.status.busy": "2025-10-03T16:33:40.778916Z",
     "iopub.status.idle": "2025-10-03T16:33:41.247676Z",
     "shell.execute_reply": "2025-10-03T16:33:41.247193Z"
    },
    "papermill": {
     "duration": 0.488045,
     "end_time": "2025-10-03T16:33:41.264914",
     "exception": false,
     "start_time": "2025-10-03T16:33:40.776869",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4.473654,
   "end_time": "2025-10-03T16:33:41.843233",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2025-10-03T16:33:37.369579",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}