{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "29391d5f",
   "metadata": {
    "papermill": {
     "duration": 0.001482,
     "end_time": "2025-09-27T01:13:39.669023",
     "exception": false,
     "start_time": "2025-09-27T01:13:39.667541",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e409f6f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T01:13:39.672635Z",
     "iopub.status.busy": "2025-09-27T01:13:39.672470Z",
     "iopub.status.idle": "2025-09-27T01:13:41.853500Z",
     "shell.execute_reply": "2025-09-27T01:13:41.852970Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.184719,
     "end_time": "2025-09-27T01:13:41.854971",
     "exception": false,
     "start_time": "2025-09-27T01:13:39.670252",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3e284a55",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T01:13:41.858378Z",
     "iopub.status.busy": "2025-09-27T01:13:41.858029Z",
     "iopub.status.idle": "2025-09-27T01:13:41.860321Z",
     "shell.execute_reply": "2025-09-27T01:13:41.859853Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.0054,
     "end_time": "2025-09-27T01:13:41.861718",
     "exception": false,
     "start_time": "2025-09-27T01:13:41.856318",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "418df125",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T01:13:41.864910Z",
     "iopub.status.busy": "2025-09-27T01:13:41.864737Z",
     "iopub.status.idle": "2025-09-27T01:13:41.871026Z",
     "shell.execute_reply": "2025-09-27T01:13:41.870364Z"
    },
    "papermill": {
     "duration": 0.009435,
     "end_time": "2025-09-27T01:13:41.872451",
     "exception": false,
     "start_time": "2025-09-27T01:13:41.863016",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6aefe547",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T01:13:41.876239Z",
     "iopub.status.busy": "2025-09-27T01:13:41.875943Z",
     "iopub.status.idle": "2025-09-27T01:13:41.879460Z",
     "shell.execute_reply": "2025-09-27T01:13:41.878911Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.006886,
     "end_time": "2025-09-27T01:13:41.880659",
     "exception": false,
     "start_time": "2025-09-27T01:13:41.873773",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b870a828",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001136,
     "end_time": "2025-09-27T01:13:41.883146",
     "exception": false,
     "start_time": "2025-09-27T01:13:41.882010",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c0018081",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T01:13:41.886426Z",
     "iopub.status.busy": "2025-09-27T01:13:41.886242Z",
     "iopub.status.idle": "2025-09-27T01:13:41.893725Z",
     "shell.execute_reply": "2025-09-27T01:13:41.893093Z"
    },
    "papermill": {
     "duration": 0.011107,
     "end_time": "2025-09-27T01:13:41.895433",
     "exception": false,
     "start_time": "2025-09-27T01:13:41.884326",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c22bdc4c",
   "metadata": {
    "papermill": {
     "duration": 0.001513,
     "end_time": "2025-09-27T01:13:41.898459",
     "exception": false,
     "start_time": "2025-09-27T01:13:41.896946",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e322ebe6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T01:13:41.901989Z",
     "iopub.status.busy": "2025-09-27T01:13:41.901801Z",
     "iopub.status.idle": "2025-09-27T01:13:41.985010Z",
     "shell.execute_reply": "2025-09-27T01:13:41.984461Z"
    },
    "papermill": {
     "duration": 0.086685,
     "end_time": "2025-09-27T01:13:41.986513",
     "exception": false,
     "start_time": "2025-09-27T01:13:41.899828",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86cb9746",
   "metadata": {
    "papermill": {
     "duration": 0.001458,
     "end_time": "2025-09-27T01:13:41.989722",
     "exception": false,
     "start_time": "2025-09-27T01:13:41.988264",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1a3d3437",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T01:13:41.994439Z",
     "iopub.status.busy": "2025-09-27T01:13:41.994235Z",
     "iopub.status.idle": "2025-09-27T01:13:42.311061Z",
     "shell.execute_reply": "2025-09-27T01:13:42.310435Z"
    },
    "papermill": {
     "duration": 0.32068,
     "end_time": "2025-09-27T01:13:42.312471",
     "exception": false,
     "start_time": "2025-09-27T01:13:41.991791",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.700175,
   "end_time": "2025-09-27T01:13:42.642071",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2025-09-27T01:13:38.941896",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}