{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f51574cb",
   "metadata": {
    "papermill": {
     "duration": 0.005045,
     "end_time": "2025-09-26T18:35:19.715509",
     "exception": false,
     "start_time": "2025-09-26T18:35:19.710464",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5676e3a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:35:19.726796Z",
     "iopub.status.busy": "2025-09-26T18:35:19.726411Z",
     "iopub.status.idle": "2025-09-26T18:35:21.408866Z",
     "shell.execute_reply": "2025-09-26T18:35:21.408343Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.689744,
     "end_time": "2025-09-26T18:35:21.410139",
     "exception": false,
     "start_time": "2025-09-26T18:35:19.720395",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bf586da9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:35:21.413190Z",
     "iopub.status.busy": "2025-09-26T18:35:21.412885Z",
     "iopub.status.idle": "2025-09-26T18:35:21.421018Z",
     "shell.execute_reply": "2025-09-26T18:35:21.420651Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.010714,
     "end_time": "2025-09-26T18:35:21.422105",
     "exception": false,
     "start_time": "2025-09-26T18:35:21.411391",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b3001e6d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:35:21.424530Z",
     "iopub.status.busy": "2025-09-26T18:35:21.424403Z",
     "iopub.status.idle": "2025-09-26T18:35:21.432053Z",
     "shell.execute_reply": "2025-09-26T18:35:21.431493Z"
    },
    "papermill": {
     "duration": 0.010243,
     "end_time": "2025-09-26T18:35:21.433332",
     "exception": false,
     "start_time": "2025-09-26T18:35:21.423089",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fa5e66b4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:35:21.436332Z",
     "iopub.status.busy": "2025-09-26T18:35:21.436190Z",
     "iopub.status.idle": "2025-09-26T18:35:21.445348Z",
     "shell.execute_reply": "2025-09-26T18:35:21.444925Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.0119,
     "end_time": "2025-09-26T18:35:21.446509",
     "exception": false,
     "start_time": "2025-09-26T18:35:21.434609",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19538f2b",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001027,
     "end_time": "2025-09-26T18:35:21.448626",
     "exception": false,
     "start_time": "2025-09-26T18:35:21.447599",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7b2a49c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:35:21.451389Z",
     "iopub.status.busy": "2025-09-26T18:35:21.451248Z",
     "iopub.status.idle": "2025-09-26T18:35:21.455240Z",
     "shell.execute_reply": "2025-09-26T18:35:21.454750Z"
    },
    "papermill": {
     "duration": 0.006953,
     "end_time": "2025-09-26T18:35:21.456627",
     "exception": false,
     "start_time": "2025-09-26T18:35:21.449674",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e345c37c",
   "metadata": {
    "papermill": {
     "duration": 0.001135,
     "end_time": "2025-09-26T18:35:21.459010",
     "exception": false,
     "start_time": "2025-09-26T18:35:21.457875",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d5af39dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:35:21.461790Z",
     "iopub.status.busy": "2025-09-26T18:35:21.461657Z",
     "iopub.status.idle": "2025-09-26T18:35:21.535425Z",
     "shell.execute_reply": "2025-09-26T18:35:21.535051Z"
    },
    "papermill": {
     "duration": 0.076458,
     "end_time": "2025-09-26T18:35:21.536578",
     "exception": false,
     "start_time": "2025-09-26T18:35:21.460120",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b179b58d",
   "metadata": {
    "papermill": {
     "duration": 0.001499,
     "end_time": "2025-09-26T18:35:21.539705",
     "exception": false,
     "start_time": "2025-09-26T18:35:21.538206",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a169b992",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:35:21.543100Z",
     "iopub.status.busy": "2025-09-26T18:35:21.542969Z",
     "iopub.status.idle": "2025-09-26T18:35:21.873919Z",
     "shell.execute_reply": "2025-09-26T18:35:21.873491Z"
    },
    "papermill": {
     "duration": 0.334045,
     "end_time": "2025-09-26T18:35:21.875061",
     "exception": false,
     "start_time": "2025-09-26T18:35:21.541016",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.068759,
   "end_time": "2025-09-26T18:35:22.209125",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2025-09-26T18:35:19.140366",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}