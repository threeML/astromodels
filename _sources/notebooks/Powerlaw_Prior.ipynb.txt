{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e43c722c",
   "metadata": {
    "papermill": {
     "duration": 0.007518,
     "end_time": "2025-10-02T02:20:55.497008",
     "exception": false,
     "start_time": "2025-10-02T02:20:55.489490",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "355ec119",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T02:20:55.509189Z",
     "iopub.status.busy": "2025-10-02T02:20:55.508693Z",
     "iopub.status.idle": "2025-10-02T02:20:57.442061Z",
     "shell.execute_reply": "2025-10-02T02:20:57.441478Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.941239,
     "end_time": "2025-10-02T02:20:57.443422",
     "exception": false,
     "start_time": "2025-10-02T02:20:55.502183",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5a708dc9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T02:20:57.446561Z",
     "iopub.status.busy": "2025-10-02T02:20:57.446213Z",
     "iopub.status.idle": "2025-10-02T02:20:57.453531Z",
     "shell.execute_reply": "2025-10-02T02:20:57.452878Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.010232,
     "end_time": "2025-10-02T02:20:57.454929",
     "exception": false,
     "start_time": "2025-10-02T02:20:57.444697",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "09ce5011",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T02:20:57.457967Z",
     "iopub.status.busy": "2025-10-02T02:20:57.457805Z",
     "iopub.status.idle": "2025-10-02T02:20:57.459828Z",
     "shell.execute_reply": "2025-10-02T02:20:57.459404Z"
    },
    "papermill": {
     "duration": 0.004791,
     "end_time": "2025-10-02T02:20:57.461028",
     "exception": false,
     "start_time": "2025-10-02T02:20:57.456237",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "cb6446dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T02:20:57.464227Z",
     "iopub.status.busy": "2025-10-02T02:20:57.464037Z",
     "iopub.status.idle": "2025-10-02T02:20:57.467445Z",
     "shell.execute_reply": "2025-10-02T02:20:57.466963Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.006528,
     "end_time": "2025-10-02T02:20:57.468768",
     "exception": false,
     "start_time": "2025-10-02T02:20:57.462240",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "074e9870",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001055,
     "end_time": "2025-10-02T02:20:57.471110",
     "exception": false,
     "start_time": "2025-10-02T02:20:57.470055",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5091d965",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T02:20:57.474074Z",
     "iopub.status.busy": "2025-10-02T02:20:57.473904Z",
     "iopub.status.idle": "2025-10-02T02:20:57.478269Z",
     "shell.execute_reply": "2025-10-02T02:20:57.477923Z"
    },
    "papermill": {
     "duration": 0.007474,
     "end_time": "2025-10-02T02:20:57.479587",
     "exception": false,
     "start_time": "2025-10-02T02:20:57.472113",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a706140",
   "metadata": {
    "papermill": {
     "duration": 0.001318,
     "end_time": "2025-10-02T02:20:57.482338",
     "exception": false,
     "start_time": "2025-10-02T02:20:57.481020",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f4ea763c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T02:20:57.485544Z",
     "iopub.status.busy": "2025-10-02T02:20:57.485369Z",
     "iopub.status.idle": "2025-10-02T02:20:57.610808Z",
     "shell.execute_reply": "2025-10-02T02:20:57.599365Z"
    },
    "papermill": {
     "duration": 0.132415,
     "end_time": "2025-10-02T02:20:57.615945",
     "exception": false,
     "start_time": "2025-10-02T02:20:57.483530",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16794dde",
   "metadata": {
    "papermill": {
     "duration": 0.001984,
     "end_time": "2025-10-02T02:20:57.619617",
     "exception": false,
     "start_time": "2025-10-02T02:20:57.617633",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e8ab300f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T02:20:57.631671Z",
     "iopub.status.busy": "2025-10-02T02:20:57.629180Z",
     "iopub.status.idle": "2025-10-02T02:20:58.005593Z",
     "shell.execute_reply": "2025-10-02T02:20:58.004601Z"
    },
    "papermill": {
     "duration": 0.385872,
     "end_time": "2025-10-02T02:20:58.006891",
     "exception": false,
     "start_time": "2025-10-02T02:20:57.621019",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.673683,
   "end_time": "2025-10-02T02:20:58.541154",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2025-10-02T02:20:54.867471",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}