{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cba86eee",
   "metadata": {
    "papermill": {
     "duration": 0.00144,
     "end_time": "2025-09-27T00:40:10.326767",
     "exception": false,
     "start_time": "2025-09-27T00:40:10.325327",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "84382b63",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:40:10.330134Z",
     "iopub.status.busy": "2025-09-27T00:40:10.329969Z",
     "iopub.status.idle": "2025-09-27T00:40:12.316894Z",
     "shell.execute_reply": "2025-09-27T00:40:12.316222Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.990414,
     "end_time": "2025-09-27T00:40:12.318379",
     "exception": false,
     "start_time": "2025-09-27T00:40:10.327965",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a9cef2be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:40:12.321708Z",
     "iopub.status.busy": "2025-09-27T00:40:12.321338Z",
     "iopub.status.idle": "2025-09-27T00:40:12.323803Z",
     "shell.execute_reply": "2025-09-27T00:40:12.323395Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.005384,
     "end_time": "2025-09-27T00:40:12.325071",
     "exception": false,
     "start_time": "2025-09-27T00:40:12.319687",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e556cf40",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:40:12.328065Z",
     "iopub.status.busy": "2025-09-27T00:40:12.327910Z",
     "iopub.status.idle": "2025-09-27T00:40:12.330061Z",
     "shell.execute_reply": "2025-09-27T00:40:12.329624Z"
    },
    "papermill": {
     "duration": 0.004814,
     "end_time": "2025-09-27T00:40:12.331101",
     "exception": false,
     "start_time": "2025-09-27T00:40:12.326287",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "45d0488a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:40:12.333702Z",
     "iopub.status.busy": "2025-09-27T00:40:12.333573Z",
     "iopub.status.idle": "2025-09-27T00:40:12.342505Z",
     "shell.execute_reply": "2025-09-27T00:40:12.342026Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011374,
     "end_time": "2025-09-27T00:40:12.343555",
     "exception": false,
     "start_time": "2025-09-27T00:40:12.332181",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc7f2007",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.000996,
     "end_time": "2025-09-27T00:40:12.345625",
     "exception": false,
     "start_time": "2025-09-27T00:40:12.344629",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d9be0c62",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:40:12.348290Z",
     "iopub.status.busy": "2025-09-27T00:40:12.348104Z",
     "iopub.status.idle": "2025-09-27T00:40:12.352671Z",
     "shell.execute_reply": "2025-09-27T00:40:12.352291Z"
    },
    "papermill": {
     "duration": 0.007499,
     "end_time": "2025-09-27T00:40:12.354092",
     "exception": false,
     "start_time": "2025-09-27T00:40:12.346593",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a12308a",
   "metadata": {
    "papermill": {
     "duration": 0.001241,
     "end_time": "2025-09-27T00:40:12.356710",
     "exception": false,
     "start_time": "2025-09-27T00:40:12.355469",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "dfb2a93b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:40:12.359929Z",
     "iopub.status.busy": "2025-09-27T00:40:12.359756Z",
     "iopub.status.idle": "2025-09-27T00:40:12.469388Z",
     "shell.execute_reply": "2025-09-27T00:40:12.468798Z"
    },
    "papermill": {
     "duration": 0.112483,
     "end_time": "2025-09-27T00:40:12.470462",
     "exception": false,
     "start_time": "2025-09-27T00:40:12.357979",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb1e57be",
   "metadata": {
    "papermill": {
     "duration": 0.001335,
     "end_time": "2025-09-27T00:40:12.473426",
     "exception": false,
     "start_time": "2025-09-27T00:40:12.472091",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cead56fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:40:12.477210Z",
     "iopub.status.busy": "2025-09-27T00:40:12.476873Z",
     "iopub.status.idle": "2025-09-27T00:40:12.873152Z",
     "shell.execute_reply": "2025-09-27T00:40:12.872699Z"
    },
    "papermill": {
     "duration": 0.413435,
     "end_time": "2025-09-27T00:40:12.888139",
     "exception": false,
     "start_time": "2025-09-27T00:40:12.474704",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEKdPukDTzrppE/8RTt06BC33HJLS8cEAABAa8XemjVrqoj7KIsWLYr/+Z//+djHAQAAUCexN3369E3ue//992Pq1Klx/fXXxw477BDnnnvulhofAAAAn2bsbcpzzz0XEyZMiJdffjmOOeaYGD9+fBV8AAAAtMHYW7ZsWVx55ZVxxx13RO/eveOHP/xhDB06dMuODgAAgNaLvQceeCAuvfTSWLJkSZx88skxZsyY6NKlS8tGAAAAQG1j73e/+11cdNFF8cgjj8Q+++wTN9xwQ+y7775bflQAAAC0Tuw1NDTED37wg2hsbIyxY8fGKaecEh07uk0fAABAm469733ve9UtFcr1eQ899FD1tinlcbfeeuuWGiMAAACfVuwNHjx4c782AAAA9R5706ZN+3RHAgAAwBbjojsAAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAk1CZi76abboovfOELMXDgwPja174Wzz33XLW9sbExrr766hg6dGgccMABMWrUqFi8eHGthwsAAFBzdR97P/rRj2Lq1Kkxbty4uP3222PnnXeOf/qnf4o1a9ZU26dPnx6TJk2KadOmxcqVK2PkyJG1HjIAAEDN1XXsrV69uprVK3H3pS99qZrZmzx5cqxYsSJeffXVaGhoiNGjR8eRRx4Z++23XxV9zz77bMydO7fWQwcAAKipuo69559/Pt555534yle+0rxtxx13jMceeyy22mqr6pTNww47rHlf7969o2/fvvH444/XaMQAAAD1oVPUsd/85jex7bbbxqOPPho33HBDvP322zFo0KAYO3ZszJ8/Pzp27Bh9+vTZ4HN69eoVS5YsafH3HDZs2Cb3jRkzJvr379/irw0AANBa6npm7913341Vq1bFv/3bv8X48ePjuuuuqwLvlFNOieXLl0fnzp2rj9fXrVu3ah8AAEB7Vtcze+vWrasWYrn88stj3333rbbtueeezbNvJQTLY9YPvrKtR48eLf6eM2fO3OS+efPmCUkAAKBNqOuZvZ122ql6/6d/+qfN20rI9ezZM958883q1guLFi3a4HPKx+XaPQAAgPasrmPvc5/7XPX+17/+9Qandr7xxhuxxx57xC677BKzZs1q3rdgwYLqWr6Puu4OAACgPajr0zg/+9nPVjdTP++886q37bffPq6//vpqkZTDDz88TjjhhJgyZUo109elS5fqtgzDhw+Pfv361XroAAAANVXXsVdcddVV1TV7Z599dqxduzYOPvjguPHGG6vr9EaMGFHdc6+szlmu7SuhN3HixFoPGQAAoOY6NJYL3/hEmhZo6d69ewwYMCDqwfCFDbUeAgAApDaj76nRFrukrq/ZAwAAoGXEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEioTcXePffcE3vttVe8/fbb1cerV6+OCy+8MIYMGRKDBw+O8847L5YvX17rYQIAANRcm4m9N954Iy699NINtl122WUxe/bsmDJlStx8880xb968OP/882s2RgAAgHrRZmKvRNzee+/d/PHSpUvjrrvuiu9+97txyCGHxAEHHBDjx4+PBx54IJYsWVLTsQIAANRam4i9O++8M956660488wzm7c9/fTT1fsSek0GDRoUnTp1iieeeKIm4wQAAKgXnaLOvf766/Gv//qv8eMf/7iazWsyf/786NmzZ3Tu3Ll5W/n3jjvu+AfN7A0bNmyT+8aMGRP9+/dv8dcGAABoLXU9s9fY2FgtunLiiSducApnURZi6dKlywc+p1u3bhZpAQAA2r26ntm7/fbb45133okRI0Z8YF+PHj1i5cqVH9i+atWqal9LzZw5c5P7ygIwQhIAAGgL6jr2Zs2aFa+88koceOCBzTN9xZ//+Z/HrrvuWl3HV26/0HQq59q1a6ttffr0qem4AQAAaq2uY6/cQ2/ZsmXNH8+dOzfGjRsX06ZNi912262KvqeeeioOPfTQav+cOXOqICz33AMAAGjP6jr2evXqVb01Wbx4cfV+9913rxZiOfbYY+Piiy+OSZMmxXvvvRcTJ06M448/vrpuDwAAoD2r69j7OBMmTKhutF6u6Su3XDjmmGOqmT8AAID2rkNj04VwfKymBVq6d+8eAwYMiHowfGFDrYcAAACpzeh7arTFLqnrWy8AAADQMmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYA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JbYExxFbimOJ9n4ctekFWsq99RobG+Opp55q3jZnzpxqW7nnHgAAQHvVpmOvnKp57LHHVgunlMh79NFHq5uqH3/88dV1ewAAAO1Vmz6Ns5gwYUJceumlMWLEiOqWC8ccc0yMGzeu1sMCAACoqTYfe127do1LLrmkegMAACDBaZwAAAB8uA6NZTUTAAAAUjGzBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJib06t3r16rjwwgtjyJAhMXjw4DjvvPNi+fLlm3z8bbfdFkcccUR87nOfi1NOOSVee+21Vh0vbf84Wrt2bVx11VVx+OGHx3777Rdf/vKX4xe/+EWrj5kcv5Oa/Pd//3cMGjQo7r///lYZJ7mOoxkzZsQxxxwTAwcOjC9+8Yvxs5/9rFXHS45jqbGxMRoaGuKoo46KAw88ME4++eR45ZVXWn3M1K+333479tlnn+r9ppTj6Oqrr46hQ4fGAQccEKNGjYrFixdHvRJ7de6yyy6L2bNnx5QpU+Lmm2+OefPmxfnnn/+hj73vvvvi+9//fowZMybuuOOO6NWrV5x++umxcuXKVh83bfc4uv766+P222+Pc889N37605/GX/7lX8ZZZ50VL7zwQquPm7Z9LDV5//33q+PJ7yJachw988wzMXr06Cr27rrrrvjKV75SPfbVV19t9XHTto+l//iP/4hrr702zj777LjllluiW7duccYZZ3yiF6zI780334xLL720+pv1UaZOnRrTp0+PSZMmxbRp06q/bSNHjoy61Ujdevfddxv33XffxkceeaR525NPPtk4YMCAxsWLF3/g8ccdd1zj97///eaPV6xY0Tho0KDG++67r9XGTNs/joYOHdp40003bbDt7/7u7xq/+93vtsp4yXMsNSnH07e+9a3GPffc0+8jNvs4OvPMMxvHjBmzwbbjjz++8dZbb22V8ZLnWPrGN77ReMkllzR//PbbbzfutddejY8++mirjZn6NGHChOpvVNPbkiVLPvRx69atazz00EMbb7vttuZtr7/+evU5zz33XGM9MrNXx55++unq/SGHHNK8rZwG1alTp3jiiSc2eOyyZcuqmZfDDjuseVuXLl1i//33j8cff7wVR0292ZzjaNWqVbHVVltV+9e30047xVtvvdVKIybDsdTk5Zdfrl4FLa+WwuYeR+W08vI3rMzmra+8qv7Nb36zlUZMlt9JS5curWbzmmyzzTbRoUOH6lRQ2rcRI0bEPffcE5dccslHPq6c9ltO2Vz/+Xbv3r2jb9++dft8W+zVsfnz50fPnj2jc+fOzdvKv3fcccdYsmTJBo9duHBhrFu3LnbbbbcNtpdTOTd+LO3L5hxH5Q/fo48+Wl370OS3v/1tdYrM3nvv3arjpm0fS01P1Mvpm+UUvI1/N9F+bc5xtGDBglixYkW88847ccIJJ1TXZB133HHVNXywub+TyhP0u+++O1566aXqxc0rr7yyir9yXNG+9e7du3qes/vuu3/sMdexY8fo06dPm3m+LfbqWDmHvMzObaz8Ytr4/PKmjzd+/Ic9lvZlc46jjT344IPVE6zyh/O00077FEdJxmPpxhtvjO7du8c3vvGNVhoh2Y6jd999t3pfFo362te+Vs0SH3roofEP//AP8dRTT7XamMnxO+k73/lOdO3aNY499thqBrBcb3XmmWfGdttt10ojpq1bvnx59YJCCb628ny7U60HwKb16NHjQxc0KK9GlX0bP7Yor4Cur5yasPFjaV825zhqUlahmjBhQhV7ZXXXclrDZz7zmVYYLVmOpRdffLFaAKG8il5Ok4KWHEfljJXi7//+76sZvaJcnlBO0SunXB100EGtNGoy/H0ri2iUJ+o33XRT7LzzzvHII49ULyR89rOfrf7Wwccpx1U5vsrvpvWD76OeU9Wa2Ktj5dSEcp1UCbamUxTKaVFl28bTx7vsskv1/ne/+1113nCT8nFZQpb2a3OOo6bTpr71rW9Vv8jKqmVliWrY3GOpPBkv1xKXW3es75xzzqlmZ8qqirRPm3McleuFi/79+2+wfY899nAdMZt1LJVTN5988snqFlVNLxKU2ws9//zz1a08xB6f9Jgrt15YtGhRdepnk/Lx0UcfHfXIaZx1rFw3VQ6o9U9VmTNnTrVt4/PLt99+++rVzpkzZzZvK0+0nn322Rg2bFirjpu2exwVF1xwQXWaS3nVXOjR0mPpb/7mb+LnP/95dRw1vRVjx46tXkmn/dqc46hc61mCr8wUr+83v/nNBwKQ9mdzjqVNLadfIrFcrw6fxIABA6oJllmzZm3wInm5lq9en2+b2atjZTq4nFd+8cUXV/fyeO+992LixIlx/PHHV+cGlwtBy+kLTa9elZXJLrroothrr71i1113jWuuuSb++I//OA4++OBa/yi0keOonL752GOPVY/9/e9/X701KddFlAuQab8251gq18B82HUw5VXR9c8+oP3ZnOOonCZV7hd73XXXVU+wypkq999/fxV75W8c7dvmHEvlSfqee+5ZPU/653/+5+rvWfl799BDD8UPf/jDWv8o1LE33nijel+OmfI7qaxlUO7rWP6eledGkydPjuHDh0e/fv2iHnUo91+o9SDYtHINXlmyvNwwvSwlXG4qO27cuNh6662rVe7KKQnrr0r2ox/9KBoaGqon6eUVr/LLzxN0Pulx9Nxzz8XXv/71D/0an//856uL2WnfNvd30vrKC1FXX3113Z7qQv0eRz/+8Y+rt7LkeXnSXh5rBUU291gqx095kaBcq1duw1Bmh8t1fF/84hdr/WNQJ5544ok46aSTqhcCyuJ0Rbm0pWh6DlRmicsZKuVyhDVr1lShV15k2HbbbaMeiT0AAICEXLMHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AWulmveXG8rNnz671UABoJ8QeAABAQmIPAAAgIbEHAB/jtNNOi8GDB8eaNWs22D5+/Pg46KCDYtWqVfHLX/4yvv71r8cBBxwQQ4YMiVNPPTWeeuqpTX7Nc889Nw4//PANti1cuLA61fOuu+5q3rZixYq4/PLLq8fuv//+8bd/+7cxY8aMT+GnBCAbsQcAH+OYY46JpUuXxpNPPtm8rYTfQw89FEcffXS8+OKLMXr06Nh9993jsssuq0Luf//3f+P000+Pd955p8Xf9/33348zzzwzfvazn1XB+S//8i/V9/jOd74Tv/jFL7bQTwdAVp1qPQAAqHdHHXVUTJw4sZq9Gzp0aLXtsccei3fffTf++q//Ol5++eU48MADqxjr0KFDtf+P/uiP4pRTTomXXnqpmulrifvuu69a2OWOO+6oZgyLv/iLv6hCcsqUKfHlL395C/6UAGRjZg8APsa2224bw4cPjwcffDAaGxurbQ888ED06dOnOo2znFp52223xbJly+L555+v9k2fPr15dq6lHn300ejVq1fsueeesXz58ua3ckrnb3/721iyZMkW+xkByMfMHgB8Ascee2x16uQzzzwTAwcOrMLvhBNOqGbyFixYEBMmTKhm4Xbcccfo169f7Lrrrpv9PZpCssnixYvjjTfeqGYNP0yZ4dtpp51a/DMBkJvYA4BPYNiwYbHDDjtUp3KW2bVyLV45hbMYN25cNctWZvTKNXVFuZ/ez3/+801+vabTPde38fV9n/nMZ5qvA/wwvXv3/gN/KgAyE3sA8AlsvfXW8aUvfama0fv9739frYz5J3/yJ9W+skDLcccd1xx6xcfdPL1bt25VNJbZvKbwmzNnzgaP+fznPx+PPPJI9XV79uzZvP3mm2+urhmcOnXqFv4pAchE7AHAZqzKefvtt8eiRYuq2bwm5bTO//zP/4w99tgjtttuu3j44Yfjv/7rv6p9JcoGDBjwga/1Z3/2Z3HrrbfGDTfcUIXir3/967jllls2eEzZXr5fWYnz5JNPrq4dnDVrVvz0pz+tbvvQsaNL7wHYNH8lAOATKtfO7bbbbrFu3bpqlq9JOc2yBN/3vve9mDx5cnXd3t13312t3FkCrlzTt7Hy+SNGjKiCr6ywWWbryv301te1a9dq/3777RdXXHFFFZjPPfdcXHLJJVX8AcBH6dC48dXgAAAAtHlm9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABA5PP/ALQ4w65h9PnbAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.766823,
   "end_time": "2025-09-27T00:40:13.358495",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2025-09-27T00:40:09.591672",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}