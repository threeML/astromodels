{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e50d0f61",
   "metadata": {
    "papermill": {
     "duration": 0.002616,
     "end_time": "2025-09-27T06:19:36.324047",
     "exception": false,
     "start_time": "2025-09-27T06:19:36.321431",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "60f025c8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T06:19:36.329330Z",
     "iopub.status.busy": "2025-09-27T06:19:36.329090Z",
     "iopub.status.idle": "2025-09-27T06:19:38.152845Z",
     "shell.execute_reply": "2025-09-27T06:19:38.152339Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.828271,
     "end_time": "2025-09-27T06:19:38.154199",
     "exception": false,
     "start_time": "2025-09-27T06:19:36.325928",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7744a5cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T06:19:38.157691Z",
     "iopub.status.busy": "2025-09-27T06:19:38.157306Z",
     "iopub.status.idle": "2025-09-27T06:19:38.165711Z",
     "shell.execute_reply": "2025-09-27T06:19:38.165194Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.01149,
     "end_time": "2025-09-27T06:19:38.167061",
     "exception": false,
     "start_time": "2025-09-27T06:19:38.155571",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c0b835ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T06:19:38.170203Z",
     "iopub.status.busy": "2025-09-27T06:19:38.170040Z",
     "iopub.status.idle": "2025-09-27T06:19:38.177037Z",
     "shell.execute_reply": "2025-09-27T06:19:38.176585Z"
    },
    "papermill": {
     "duration": 0.009841,
     "end_time": "2025-09-27T06:19:38.178196",
     "exception": false,
     "start_time": "2025-09-27T06:19:38.168355",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5af5df01",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T06:19:38.181068Z",
     "iopub.status.busy": "2025-09-27T06:19:38.180931Z",
     "iopub.status.idle": "2025-09-27T06:19:38.183696Z",
     "shell.execute_reply": "2025-09-27T06:19:38.183324Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.005404,
     "end_time": "2025-09-27T06:19:38.184820",
     "exception": false,
     "start_time": "2025-09-27T06:19:38.179416",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a891a21",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001016,
     "end_time": "2025-09-27T06:19:38.186888",
     "exception": false,
     "start_time": "2025-09-27T06:19:38.185872",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f5c41e6d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T06:19:38.189465Z",
     "iopub.status.busy": "2025-09-27T06:19:38.189337Z",
     "iopub.status.idle": "2025-09-27T06:19:38.193466Z",
     "shell.execute_reply": "2025-09-27T06:19:38.192900Z"
    },
    "papermill": {
     "duration": 0.006796,
     "end_time": "2025-09-27T06:19:38.194642",
     "exception": false,
     "start_time": "2025-09-27T06:19:38.187846",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aef257da",
   "metadata": {
    "papermill": {
     "duration": 0.001101,
     "end_time": "2025-09-27T06:19:38.197009",
     "exception": false,
     "start_time": "2025-09-27T06:19:38.195908",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "573fd838",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T06:19:38.199631Z",
     "iopub.status.busy": "2025-09-27T06:19:38.199498Z",
     "iopub.status.idle": "2025-09-27T06:19:38.270386Z",
     "shell.execute_reply": "2025-09-27T06:19:38.270014Z"
    },
    "papermill": {
     "duration": 0.07365,
     "end_time": "2025-09-27T06:19:38.271678",
     "exception": false,
     "start_time": "2025-09-27T06:19:38.198028",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7d703ef",
   "metadata": {
    "papermill": {
     "duration": 0.001885,
     "end_time": "2025-09-27T06:19:38.275290",
     "exception": false,
     "start_time": "2025-09-27T06:19:38.273405",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "02af3c84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T06:19:38.287725Z",
     "iopub.status.busy": "2025-09-27T06:19:38.287318Z",
     "iopub.status.idle": "2025-09-27T06:19:38.707109Z",
     "shell.execute_reply": "2025-09-27T06:19:38.705299Z"
    },
    "papermill": {
     "duration": 0.429796,
     "end_time": "2025-09-27T06:19:38.709419",
     "exception": false,
     "start_time": "2025-09-27T06:19:38.279623",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.528477,
   "end_time": "2025-09-27T06:19:39.155454",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2025-09-27T06:19:35.626977",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}