{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8893e6fd",
   "metadata": {
    "papermill": {
     "duration": 0.004791,
     "end_time": "2025-09-26T18:54:15.917976",
     "exception": false,
     "start_time": "2025-09-26T18:54:15.913185",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b79fc79b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:54:15.921890Z",
     "iopub.status.busy": "2025-09-26T18:54:15.921714Z",
     "iopub.status.idle": "2025-09-26T18:54:18.333941Z",
     "shell.execute_reply": "2025-09-26T18:54:18.333283Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.416669,
     "end_time": "2025-09-26T18:54:18.336038",
     "exception": false,
     "start_time": "2025-09-26T18:54:15.919369",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "375efc34",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:54:18.339560Z",
     "iopub.status.busy": "2025-09-26T18:54:18.339214Z",
     "iopub.status.idle": "2025-09-26T18:54:18.341990Z",
     "shell.execute_reply": "2025-09-26T18:54:18.341305Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.006077,
     "end_time": "2025-09-26T18:54:18.343495",
     "exception": false,
     "start_time": "2025-09-26T18:54:18.337418",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8b7accc4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:54:18.346531Z",
     "iopub.status.busy": "2025-09-26T18:54:18.346381Z",
     "iopub.status.idle": "2025-09-26T18:54:18.354075Z",
     "shell.execute_reply": "2025-09-26T18:54:18.353163Z"
    },
    "papermill": {
     "duration": 0.01094,
     "end_time": "2025-09-26T18:54:18.355558",
     "exception": false,
     "start_time": "2025-09-26T18:54:18.344618",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "717e2b9e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:54:18.358687Z",
     "iopub.status.busy": "2025-09-26T18:54:18.358519Z",
     "iopub.status.idle": "2025-09-26T18:54:18.366640Z",
     "shell.execute_reply": "2025-09-26T18:54:18.366088Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011544,
     "end_time": "2025-09-26T18:54:18.368363",
     "exception": false,
     "start_time": "2025-09-26T18:54:18.356819",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37a7c435",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.002755,
     "end_time": "2025-09-26T18:54:18.372453",
     "exception": false,
     "start_time": "2025-09-26T18:54:18.369698",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4f30fe81",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:54:18.375625Z",
     "iopub.status.busy": "2025-09-26T18:54:18.375475Z",
     "iopub.status.idle": "2025-09-26T18:54:18.380603Z",
     "shell.execute_reply": "2025-09-26T18:54:18.379867Z"
    },
    "papermill": {
     "duration": 0.008733,
     "end_time": "2025-09-26T18:54:18.382354",
     "exception": false,
     "start_time": "2025-09-26T18:54:18.373621",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62c9c9bd",
   "metadata": {
    "papermill": {
     "duration": 0.001301,
     "end_time": "2025-09-26T18:54:18.384997",
     "exception": false,
     "start_time": "2025-09-26T18:54:18.383696",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6a15b8a1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:54:18.388730Z",
     "iopub.status.busy": "2025-09-26T18:54:18.388331Z",
     "iopub.status.idle": "2025-09-26T18:54:18.507498Z",
     "shell.execute_reply": "2025-09-26T18:54:18.502775Z"
    },
    "papermill": {
     "duration": 0.123198,
     "end_time": "2025-09-26T18:54:18.509357",
     "exception": false,
     "start_time": "2025-09-26T18:54:18.386159",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69100119",
   "metadata": {
    "papermill": {
     "duration": 0.001594,
     "end_time": "2025-09-26T18:54:18.512754",
     "exception": false,
     "start_time": "2025-09-26T18:54:18.511160",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "97ea5fa6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:54:18.530537Z",
     "iopub.status.busy": "2025-09-26T18:54:18.529161Z",
     "iopub.status.idle": "2025-09-26T18:54:18.978215Z",
     "shell.execute_reply": "2025-09-26T18:54:18.977794Z"
    },
    "papermill": {
     "duration": 0.462557,
     "end_time": "2025-09-26T18:54:18.979594",
     "exception": false,
     "start_time": "2025-09-26T18:54:18.517037",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4.322412,
   "end_time": "2025-09-26T18:54:19.514970",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2025-09-26T18:54:15.192558",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}