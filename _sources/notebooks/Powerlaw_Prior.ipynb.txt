{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f060d747",
   "metadata": {
    "papermill": {
     "duration": 0.004612,
     "end_time": "2025-09-26T22:01:50.676238",
     "exception": false,
     "start_time": "2025-09-26T22:01:50.671626",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cea45ec0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T22:01:50.688048Z",
     "iopub.status.busy": "2025-09-26T22:01:50.687574Z",
     "iopub.status.idle": "2025-09-26T22:01:52.474003Z",
     "shell.execute_reply": "2025-09-26T22:01:52.473353Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.795919,
     "end_time": "2025-09-26T22:01:52.475580",
     "exception": false,
     "start_time": "2025-09-26T22:01:50.679661",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "97606368",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T22:01:52.479215Z",
     "iopub.status.busy": "2025-09-26T22:01:52.478805Z",
     "iopub.status.idle": "2025-09-26T22:01:52.487325Z",
     "shell.execute_reply": "2025-09-26T22:01:52.486684Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011699,
     "end_time": "2025-09-26T22:01:52.488737",
     "exception": false,
     "start_time": "2025-09-26T22:01:52.477038",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "40fbdd84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T22:01:52.491999Z",
     "iopub.status.busy": "2025-09-26T22:01:52.491807Z",
     "iopub.status.idle": "2025-09-26T22:01:52.496606Z",
     "shell.execute_reply": "2025-09-26T22:01:52.495930Z"
    },
    "papermill": {
     "duration": 0.008005,
     "end_time": "2025-09-26T22:01:52.498048",
     "exception": false,
     "start_time": "2025-09-26T22:01:52.490043",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bd245acd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T22:01:52.501376Z",
     "iopub.status.busy": "2025-09-26T22:01:52.501182Z",
     "iopub.status.idle": "2025-09-26T22:01:52.510722Z",
     "shell.execute_reply": "2025-09-26T22:01:52.510032Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.012808,
     "end_time": "2025-09-26T22:01:52.512201",
     "exception": false,
     "start_time": "2025-09-26T22:01:52.499393",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "223c6c25",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001091,
     "end_time": "2025-09-26T22:01:52.514667",
     "exception": false,
     "start_time": "2025-09-26T22:01:52.513576",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6ecb16ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T22:01:52.517780Z",
     "iopub.status.busy": "2025-09-26T22:01:52.517610Z",
     "iopub.status.idle": "2025-09-26T22:01:52.522150Z",
     "shell.execute_reply": "2025-09-26T22:01:52.521764Z"
    },
    "papermill": {
     "duration": 0.007603,
     "end_time": "2025-09-26T22:01:52.523448",
     "exception": false,
     "start_time": "2025-09-26T22:01:52.515845",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b67c7f5",
   "metadata": {
    "papermill": {
     "duration": 0.001343,
     "end_time": "2025-09-26T22:01:52.526218",
     "exception": false,
     "start_time": "2025-09-26T22:01:52.524875",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1c763139",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T22:01:52.529487Z",
     "iopub.status.busy": "2025-09-26T22:01:52.529316Z",
     "iopub.status.idle": "2025-09-26T22:01:52.616528Z",
     "shell.execute_reply": "2025-09-26T22:01:52.616200Z"
    },
    "papermill": {
     "duration": 0.090301,
     "end_time": "2025-09-26T22:01:52.617842",
     "exception": false,
     "start_time": "2025-09-26T22:01:52.527541",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06b65795",
   "metadata": {
    "papermill": {
     "duration": 0.001915,
     "end_time": "2025-09-26T22:01:52.621491",
     "exception": false,
     "start_time": "2025-09-26T22:01:52.619576",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f7d71200",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T22:01:52.625405Z",
     "iopub.status.busy": "2025-09-26T22:01:52.625215Z",
     "iopub.status.idle": "2025-09-26T22:01:52.971373Z",
     "shell.execute_reply": "2025-09-26T22:01:52.970990Z"
    },
    "papermill": {
     "duration": 0.349895,
     "end_time": "2025-09-26T22:01:52.972773",
     "exception": false,
     "start_time": "2025-09-26T22:01:52.622878",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.440332,
   "end_time": "2025-09-26T22:01:53.406689",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2025-09-26T22:01:49.966357",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}