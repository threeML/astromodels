{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "01c1aaf4",
   "metadata": {
    "papermill": {
     "duration": 0.003368,
     "end_time": "2025-10-01T20:54:55.771807",
     "exception": false,
     "start_time": "2025-10-01T20:54:55.768439",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "932883a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T20:54:55.776125Z",
     "iopub.status.busy": "2025-10-01T20:54:55.775929Z",
     "iopub.status.idle": "2025-10-01T20:54:59.674647Z",
     "shell.execute_reply": "2025-10-01T20:54:59.673004Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 3.904957,
     "end_time": "2025-10-01T20:54:59.678246",
     "exception": false,
     "start_time": "2025-10-01T20:54:55.773289",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5fa9d8ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T20:54:59.685339Z",
     "iopub.status.busy": "2025-10-01T20:54:59.684825Z",
     "iopub.status.idle": "2025-10-01T20:54:59.688165Z",
     "shell.execute_reply": "2025-10-01T20:54:59.687621Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.007721,
     "end_time": "2025-10-01T20:54:59.689965",
     "exception": false,
     "start_time": "2025-10-01T20:54:59.682244",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b0a48015",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T20:54:59.693709Z",
     "iopub.status.busy": "2025-10-01T20:54:59.693532Z",
     "iopub.status.idle": "2025-10-01T20:54:59.700620Z",
     "shell.execute_reply": "2025-10-01T20:54:59.699470Z"
    },
    "papermill": {
     "duration": 0.011955,
     "end_time": "2025-10-01T20:54:59.703391",
     "exception": false,
     "start_time": "2025-10-01T20:54:59.691436",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8ce2c914",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T20:54:59.706939Z",
     "iopub.status.busy": "2025-10-01T20:54:59.706751Z",
     "iopub.status.idle": "2025-10-01T20:54:59.713924Z",
     "shell.execute_reply": "2025-10-01T20:54:59.713111Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.012424,
     "end_time": "2025-10-01T20:54:59.717345",
     "exception": false,
     "start_time": "2025-10-01T20:54:59.704921",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c36d618",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001299,
     "end_time": "2025-10-01T20:54:59.720173",
     "exception": false,
     "start_time": "2025-10-01T20:54:59.718874",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c2390a7f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T20:54:59.723776Z",
     "iopub.status.busy": "2025-10-01T20:54:59.723575Z",
     "iopub.status.idle": "2025-10-01T20:54:59.729905Z",
     "shell.execute_reply": "2025-10-01T20:54:59.728623Z"
    },
    "papermill": {
     "duration": 0.009871,
     "end_time": "2025-10-01T20:54:59.731389",
     "exception": false,
     "start_time": "2025-10-01T20:54:59.721518",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "139e0388",
   "metadata": {
    "papermill": {
     "duration": 0.006863,
     "end_time": "2025-10-01T20:54:59.740024",
     "exception": false,
     "start_time": "2025-10-01T20:54:59.733161",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d5a89b45",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T20:54:59.747565Z",
     "iopub.status.busy": "2025-10-01T20:54:59.747111Z",
     "iopub.status.idle": "2025-10-01T20:54:59.909891Z",
     "shell.execute_reply": "2025-10-01T20:54:59.908142Z"
    },
    "papermill": {
     "duration": 0.167103,
     "end_time": "2025-10-01T20:54:59.911431",
     "exception": false,
     "start_time": "2025-10-01T20:54:59.744328",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff593f0b",
   "metadata": {
    "papermill": {
     "duration": 0.001477,
     "end_time": "2025-10-01T20:54:59.914759",
     "exception": false,
     "start_time": "2025-10-01T20:54:59.913282",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1d97573f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T20:54:59.920129Z",
     "iopub.status.busy": "2025-10-01T20:54:59.919689Z",
     "iopub.status.idle": "2025-10-01T20:55:00.572345Z",
     "shell.execute_reply": "2025-10-01T20:55:00.571022Z"
    },
    "papermill": {
     "duration": 0.657894,
     "end_time": "2025-10-01T20:55:00.574056",
     "exception": false,
     "start_time": "2025-10-01T20:54:59.916162",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.425168,
   "end_time": "2025-10-01T20:55:01.318719",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2025-10-01T20:54:54.893551",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}