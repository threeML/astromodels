{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6125769d",
   "metadata": {
    "papermill": {
     "duration": 0.004258,
     "end_time": "2025-09-23T20:59:43.890278",
     "exception": false,
     "start_time": "2025-09-23T20:59:43.886020",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Powerlaw Prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a6e51570",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T20:59:43.899729Z",
     "iopub.status.busy": "2025-09-23T20:59:43.899240Z",
     "iopub.status.idle": "2025-09-23T20:59:47.187189Z",
     "shell.execute_reply": "2025-09-23T20:59:47.185184Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 3.302673,
     "end_time": "2025-09-23T20:59:47.194869",
     "exception": false,
     "start_time": "2025-09-23T20:59:43.892196",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1d8ba046",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T20:59:47.211739Z",
     "iopub.status.busy": "2025-09-23T20:59:47.210778Z",
     "iopub.status.idle": "2025-09-23T20:59:47.216349Z",
     "shell.execute_reply": "2025-09-23T20:59:47.214875Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.019602,
     "end_time": "2025-09-23T20:59:47.219035",
     "exception": false,
     "start_time": "2025-09-23T20:59:47.199433",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8e72bb5d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T20:59:47.228728Z",
     "iopub.status.busy": "2025-09-23T20:59:47.228280Z",
     "iopub.status.idle": "2025-09-23T20:59:47.237453Z",
     "shell.execute_reply": "2025-09-23T20:59:47.234627Z"
    },
    "papermill": {
     "duration": 0.018773,
     "end_time": "2025-09-23T20:59:47.241608",
     "exception": false,
     "start_time": "2025-09-23T20:59:47.222835",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Powerlaw_Prior\"\n",
    "positive_prior = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8cfb6649",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T20:59:47.251343Z",
     "iopub.status.busy": "2025-09-23T20:59:47.250583Z",
     "iopub.status.idle": "2025-09-23T20:59:47.261738Z",
     "shell.execute_reply": "2025-09-23T20:59:47.261043Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.016308,
     "end_time": "2025-09-23T20:59:47.264126",
     "exception": false,
     "start_time": "2025-09-23T20:59:47.247818",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "058419a5",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001237,
     "end_time": "2025-09-23T20:59:47.266943",
     "exception": false,
     "start_time": "2025-09-23T20:59:47.265706",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9aa65aad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T20:59:47.270456Z",
     "iopub.status.busy": "2025-09-23T20:59:47.270265Z",
     "iopub.status.idle": "2025-09-23T20:59:47.276699Z",
     "shell.execute_reply": "2025-09-23T20:59:47.275740Z"
    },
    "papermill": {
     "duration": 0.011032,
     "end_time": "2025-09-23T20:59:47.279253",
     "exception": false,
     "start_time": "2025-09-23T20:59:47.268221",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: An power law distribution function between a-b</li>\n",
       "\n",
       "<li>formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>alpha: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: slope parameter</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>a: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: lower bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>b: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: upper bound of distribution</li>\n",
       "\n",
       "<li>min_value: 0.0</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: An power law distribution function between a-b\n",
       "  * formula: $ f(x, \\alpha) = \\alpha x^{\\alpha-1)$\n",
       "  * parameters:\n",
       "    * alpha:\n",
       "      * value: 1.0\n",
       "      * desc: slope parameter\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * a:\n",
       "      * value: 0.0\n",
       "      * desc: lower bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * b:\n",
       "      * value: 1.0\n",
       "      * desc: upper bound of distribution\n",
       "      * min_value: 0.0\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "904525c2",
   "metadata": {
    "papermill": {
     "duration": 0.001552,
     "end_time": "2025-09-23T20:59:47.282586",
     "exception": false,
     "start_time": "2025-09-23T20:59:47.281034",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "113fdd4b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T20:59:47.286581Z",
     "iopub.status.busy": "2025-09-23T20:59:47.286372Z",
     "iopub.status.idle": "2025-09-23T20:59:47.419241Z",
     "shell.execute_reply": "2025-09-23T20:59:47.417316Z"
    },
    "papermill": {
     "duration": 0.136744,
     "end_time": "2025-09-23T20:59:47.420623",
     "exception": false,
     "start_time": "2025-09-23T20:59:47.283879",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d583d86",
   "metadata": {
    "papermill": {
     "duration": 0.001406,
     "end_time": "2025-09-23T20:59:47.423812",
     "exception": false,
     "start_time": "2025-09-23T20:59:47.422406",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6275a2fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T20:59:47.428158Z",
     "iopub.status.busy": "2025-09-23T20:59:47.427947Z",
     "iopub.status.idle": "2025-09-23T20:59:48.013523Z",
     "shell.execute_reply": "2025-09-23T20:59:48.012285Z"
    },
    "papermill": {
     "duration": 0.589523,
     "end_time": "2025-09-23T20:59:48.014685",
     "exception": false,
     "start_time": "2025-09-23T20:59:47.425162",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5.505143,
   "end_time": "2025-09-23T20:59:48.651581",
   "environment_variables": {},
   "exception": null,
   "input_path": "Powerlaw_Prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Powerlaw_Prior.ipynb",
   "parameters": {
    "func_name": "Powerlaw_Prior",
    "positive_prior": true
   },
   "start_time": "2025-09-23T20:59:43.146438",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}