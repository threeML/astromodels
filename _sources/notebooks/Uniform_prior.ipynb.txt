{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d6e92d9c",
   "metadata": {
    "papermill": {
     "duration": 0.002099,
     "end_time": "2025-09-27T00:39:51.284672",
     "exception": false,
     "start_time": "2025-09-27T00:39:51.282573",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4559433c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:39:51.288814Z",
     "iopub.status.busy": "2025-09-27T00:39:51.288600Z",
     "iopub.status.idle": "2025-09-27T00:39:53.191290Z",
     "shell.execute_reply": "2025-09-27T00:39:53.190699Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.906194,
     "end_time": "2025-09-27T00:39:53.192653",
     "exception": false,
     "start_time": "2025-09-27T00:39:51.286459",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4be5e5bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:39:53.196063Z",
     "iopub.status.busy": "2025-09-27T00:39:53.195720Z",
     "iopub.status.idle": "2025-09-27T00:39:53.200523Z",
     "shell.execute_reply": "2025-09-27T00:39:53.199943Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.007787,
     "end_time": "2025-09-27T00:39:53.201757",
     "exception": false,
     "start_time": "2025-09-27T00:39:53.193970",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3c8c9e0d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:39:53.204652Z",
     "iopub.status.busy": "2025-09-27T00:39:53.204506Z",
     "iopub.status.idle": "2025-09-27T00:39:53.212480Z",
     "shell.execute_reply": "2025-09-27T00:39:53.212081Z"
    },
    "papermill": {
     "duration": 0.010728,
     "end_time": "2025-09-27T00:39:53.213654",
     "exception": false,
     "start_time": "2025-09-27T00:39:53.202926",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a8549814",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:39:53.216310Z",
     "iopub.status.busy": "2025-09-27T00:39:53.216180Z",
     "iopub.status.idle": "2025-09-27T00:39:53.223034Z",
     "shell.execute_reply": "2025-09-27T00:39:53.222460Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.009467,
     "end_time": "2025-09-27T00:39:53.224246",
     "exception": false,
     "start_time": "2025-09-27T00:39:53.214779",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e4ec42a",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001032,
     "end_time": "2025-09-27T00:39:53.226485",
     "exception": false,
     "start_time": "2025-09-27T00:39:53.225453",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1238b70e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:39:53.229827Z",
     "iopub.status.busy": "2025-09-27T00:39:53.229650Z",
     "iopub.status.idle": "2025-09-27T00:39:53.234576Z",
     "shell.execute_reply": "2025-09-27T00:39:53.234169Z"
    },
    "papermill": {
     "duration": 0.008275,
     "end_time": "2025-09-27T00:39:53.235918",
     "exception": false,
     "start_time": "2025-09-27T00:39:53.227643",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a24c4649",
   "metadata": {
    "papermill": {
     "duration": 0.001255,
     "end_time": "2025-09-27T00:39:53.238678",
     "exception": false,
     "start_time": "2025-09-27T00:39:53.237423",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "36bae20e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:39:53.241697Z",
     "iopub.status.busy": "2025-09-27T00:39:53.241536Z",
     "iopub.status.idle": "2025-09-27T00:39:53.362662Z",
     "shell.execute_reply": "2025-09-27T00:39:53.358236Z"
    },
    "papermill": {
     "duration": 0.123944,
     "end_time": "2025-09-27T00:39:53.363757",
     "exception": false,
     "start_time": "2025-09-27T00:39:53.239813",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0df83032",
   "metadata": {
    "papermill": {
     "duration": 0.00135,
     "end_time": "2025-09-27T00:39:53.366753",
     "exception": false,
     "start_time": "2025-09-27T00:39:53.365403",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c2bf5128",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:39:53.371737Z",
     "iopub.status.busy": "2025-09-27T00:39:53.369853Z",
     "iopub.status.idle": "2025-09-27T00:39:53.525494Z",
     "shell.execute_reply": "2025-09-27T00:39:53.523706Z"
    },
    "papermill": {
     "duration": 0.158807,
     "end_time": "2025-09-27T00:39:53.526860",
     "exception": false,
     "start_time": "2025-09-27T00:39:53.368053",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.209321,
   "end_time": "2025-09-27T00:39:53.950916",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2025-09-27T00:39:50.741595",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}