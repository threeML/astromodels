{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b8945032",
   "metadata": {
    "papermill": {
     "duration": 0.009487,
     "end_time": "2025-10-01T22:37:44.911527",
     "exception": false,
     "start_time": "2025-10-01T22:37:44.902040",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f7135837",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T22:37:44.916424Z",
     "iopub.status.busy": "2025-10-01T22:37:44.915999Z",
     "iopub.status.idle": "2025-10-01T22:37:48.392286Z",
     "shell.execute_reply": "2025-10-01T22:37:48.389835Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 3.482349,
     "end_time": "2025-10-01T22:37:48.395468",
     "exception": false,
     "start_time": "2025-10-01T22:37:44.913119",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fa3b5034",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T22:37:48.402900Z",
     "iopub.status.busy": "2025-10-01T22:37:48.401246Z",
     "iopub.status.idle": "2025-10-01T22:37:48.408327Z",
     "shell.execute_reply": "2025-10-01T22:37:48.406978Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011788,
     "end_time": "2025-10-01T22:37:48.409698",
     "exception": false,
     "start_time": "2025-10-01T22:37:48.397910",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ca5da79a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T22:37:48.414673Z",
     "iopub.status.busy": "2025-10-01T22:37:48.413323Z",
     "iopub.status.idle": "2025-10-01T22:37:48.422366Z",
     "shell.execute_reply": "2025-10-01T22:37:48.421019Z"
    },
    "papermill": {
     "duration": 0.013541,
     "end_time": "2025-10-01T22:37:48.424647",
     "exception": false,
     "start_time": "2025-10-01T22:37:48.411106",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "04c6c9df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T22:37:48.430271Z",
     "iopub.status.busy": "2025-10-01T22:37:48.429939Z",
     "iopub.status.idle": "2025-10-01T22:37:48.438153Z",
     "shell.execute_reply": "2025-10-01T22:37:48.436548Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.015596,
     "end_time": "2025-10-01T22:37:48.443228",
     "exception": false,
     "start_time": "2025-10-01T22:37:48.427632",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e6bf646",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.002257,
     "end_time": "2025-10-01T22:37:48.449530",
     "exception": false,
     "start_time": "2025-10-01T22:37:48.447273",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "65489466",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T22:37:48.457699Z",
     "iopub.status.busy": "2025-10-01T22:37:48.457257Z",
     "iopub.status.idle": "2025-10-01T22:37:48.468388Z",
     "shell.execute_reply": "2025-10-01T22:37:48.466903Z"
    },
    "papermill": {
     "duration": 0.018968,
     "end_time": "2025-10-01T22:37:48.470195",
     "exception": false,
     "start_time": "2025-10-01T22:37:48.451227",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43c747ab",
   "metadata": {
    "papermill": {
     "duration": 0.001301,
     "end_time": "2025-10-01T22:37:48.473234",
     "exception": false,
     "start_time": "2025-10-01T22:37:48.471933",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "922db0db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T22:37:48.478560Z",
     "iopub.status.busy": "2025-10-01T22:37:48.478353Z",
     "iopub.status.idle": "2025-10-01T22:37:48.634927Z",
     "shell.execute_reply": "2025-10-01T22:37:48.629459Z"
    },
    "papermill": {
     "duration": 0.161386,
     "end_time": "2025-10-01T22:37:48.637302",
     "exception": false,
     "start_time": "2025-10-01T22:37:48.475916",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90b94c53",
   "metadata": {
    "papermill": {
     "duration": 0.001746,
     "end_time": "2025-10-01T22:37:48.644084",
     "exception": false,
     "start_time": "2025-10-01T22:37:48.642338",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "89f5c9b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T22:37:48.652906Z",
     "iopub.status.busy": "2025-10-01T22:37:48.652568Z",
     "iopub.status.idle": "2025-10-01T22:37:48.860574Z",
     "shell.execute_reply": "2025-10-01T22:37:48.857995Z"
    },
    "papermill": {
     "duration": 0.216579,
     "end_time": "2025-10-01T22:37:48.862080",
     "exception": false,
     "start_time": "2025-10-01T22:37:48.645501",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5.554569,
   "end_time": "2025-10-01T22:37:49.602244",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2025-10-01T22:37:44.047675",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}