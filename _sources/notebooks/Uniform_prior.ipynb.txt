{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d4f0f707",
   "metadata": {
    "papermill": {
     "duration": 0.003437,
     "end_time": "2025-10-03T21:29:48.585666",
     "exception": false,
     "start_time": "2025-10-03T21:29:48.582229",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "127049cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T21:29:48.589622Z",
     "iopub.status.busy": "2025-10-03T21:29:48.589394Z",
     "iopub.status.idle": "2025-10-03T21:29:51.331791Z",
     "shell.execute_reply": "2025-10-03T21:29:51.330144Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.747513,
     "end_time": "2025-10-03T21:29:51.334650",
     "exception": false,
     "start_time": "2025-10-03T21:29:48.587137",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7d8a570c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T21:29:51.341605Z",
     "iopub.status.busy": "2025-10-03T21:29:51.340590Z",
     "iopub.status.idle": "2025-10-03T21:29:51.352485Z",
     "shell.execute_reply": "2025-10-03T21:29:51.351068Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.021127,
     "end_time": "2025-10-03T21:29:51.357517",
     "exception": false,
     "start_time": "2025-10-03T21:29:51.336390",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "59998676",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T21:29:51.363698Z",
     "iopub.status.busy": "2025-10-03T21:29:51.363507Z",
     "iopub.status.idle": "2025-10-03T21:29:51.366523Z",
     "shell.execute_reply": "2025-10-03T21:29:51.365569Z"
    },
    "papermill": {
     "duration": 0.008553,
     "end_time": "2025-10-03T21:29:51.369731",
     "exception": false,
     "start_time": "2025-10-03T21:29:51.361178",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8c4a3b9f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T21:29:51.377716Z",
     "iopub.status.busy": "2025-10-03T21:29:51.375027Z",
     "iopub.status.idle": "2025-10-03T21:29:51.387436Z",
     "shell.execute_reply": "2025-10-03T21:29:51.386495Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.017661,
     "end_time": "2025-10-03T21:29:51.388921",
     "exception": false,
     "start_time": "2025-10-03T21:29:51.371260",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9152486d",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.002518,
     "end_time": "2025-10-03T21:29:51.392860",
     "exception": false,
     "start_time": "2025-10-03T21:29:51.390342",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "948a0108",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T21:29:51.395985Z",
     "iopub.status.busy": "2025-10-03T21:29:51.395799Z",
     "iopub.status.idle": "2025-10-03T21:29:51.401548Z",
     "shell.execute_reply": "2025-10-03T21:29:51.401121Z"
    },
    "papermill": {
     "duration": 0.008617,
     "end_time": "2025-10-03T21:29:51.402652",
     "exception": false,
     "start_time": "2025-10-03T21:29:51.394035",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2794c499",
   "metadata": {
    "papermill": {
     "duration": 0.001355,
     "end_time": "2025-10-03T21:29:51.405765",
     "exception": false,
     "start_time": "2025-10-03T21:29:51.404410",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8ecc7aaf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T21:29:51.409212Z",
     "iopub.status.busy": "2025-10-03T21:29:51.409029Z",
     "iopub.status.idle": "2025-10-03T21:29:51.549454Z",
     "shell.execute_reply": "2025-10-03T21:29:51.549126Z"
    },
    "papermill": {
     "duration": 0.145323,
     "end_time": "2025-10-03T21:29:51.552395",
     "exception": false,
     "start_time": "2025-10-03T21:29:51.407072",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7bee5e2d",
   "metadata": {
    "papermill": {
     "duration": 0.001731,
     "end_time": "2025-10-03T21:29:51.555972",
     "exception": false,
     "start_time": "2025-10-03T21:29:51.554241",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "35669118",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T21:29:51.560965Z",
     "iopub.status.busy": "2025-10-03T21:29:51.560779Z",
     "iopub.status.idle": "2025-10-03T21:29:51.771335Z",
     "shell.execute_reply": "2025-10-03T21:29:51.769244Z"
    },
    "papermill": {
     "duration": 0.216049,
     "end_time": "2025-10-03T21:29:51.773507",
     "exception": false,
     "start_time": "2025-10-03T21:29:51.557458",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4.414976,
   "end_time": "2025-10-03T21:29:52.306807",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2025-10-03T21:29:47.891831",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}