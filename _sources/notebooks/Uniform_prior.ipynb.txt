{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "291a21bc",
   "metadata": {
    "papermill": {
     "duration": 0.001605,
     "end_time": "2025-09-27T01:13:22.455439",
     "exception": false,
     "start_time": "2025-09-27T01:13:22.453834",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5372f841",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T01:13:22.458853Z",
     "iopub.status.busy": "2025-09-27T01:13:22.458674Z",
     "iopub.status.idle": "2025-09-27T01:13:24.385646Z",
     "shell.execute_reply": "2025-09-27T01:13:24.385044Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.930181,
     "end_time": "2025-09-27T01:13:24.386940",
     "exception": false,
     "start_time": "2025-09-27T01:13:22.456759",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6fcbaa22",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T01:13:24.390212Z",
     "iopub.status.busy": "2025-09-27T01:13:24.389872Z",
     "iopub.status.idle": "2025-09-27T01:13:24.392169Z",
     "shell.execute_reply": "2025-09-27T01:13:24.391743Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.005004,
     "end_time": "2025-09-27T01:13:24.393239",
     "exception": false,
     "start_time": "2025-09-27T01:13:24.388235",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9df6ec66",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T01:13:24.396124Z",
     "iopub.status.busy": "2025-09-27T01:13:24.395976Z",
     "iopub.status.idle": "2025-09-27T01:13:24.401059Z",
     "shell.execute_reply": "2025-09-27T01:13:24.400557Z"
    },
    "papermill": {
     "duration": 0.008047,
     "end_time": "2025-09-27T01:13:24.402465",
     "exception": false,
     "start_time": "2025-09-27T01:13:24.394418",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "691ed513",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T01:13:24.405447Z",
     "iopub.status.busy": "2025-09-27T01:13:24.405293Z",
     "iopub.status.idle": "2025-09-27T01:13:24.414319Z",
     "shell.execute_reply": "2025-09-27T01:13:24.413891Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011664,
     "end_time": "2025-09-27T01:13:24.415392",
     "exception": false,
     "start_time": "2025-09-27T01:13:24.403728",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6fdf1b7e",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.000992,
     "end_time": "2025-09-27T01:13:24.417515",
     "exception": false,
     "start_time": "2025-09-27T01:13:24.416523",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "20843b03",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T01:13:24.420035Z",
     "iopub.status.busy": "2025-09-27T01:13:24.419905Z",
     "iopub.status.idle": "2025-09-27T01:13:24.424081Z",
     "shell.execute_reply": "2025-09-27T01:13:24.423620Z"
    },
    "papermill": {
     "duration": 0.006815,
     "end_time": "2025-09-27T01:13:24.425268",
     "exception": false,
     "start_time": "2025-09-27T01:13:24.418453",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b375354d",
   "metadata": {
    "papermill": {
     "duration": 0.001141,
     "end_time": "2025-09-27T01:13:24.427830",
     "exception": false,
     "start_time": "2025-09-27T01:13:24.426689",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "66ea4c41",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T01:13:24.430785Z",
     "iopub.status.busy": "2025-09-27T01:13:24.430629Z",
     "iopub.status.idle": "2025-09-27T01:13:24.505362Z",
     "shell.execute_reply": "2025-09-27T01:13:24.504973Z"
    },
    "papermill": {
     "duration": 0.07831,
     "end_time": "2025-09-27T01:13:24.507215",
     "exception": false,
     "start_time": "2025-09-27T01:13:24.428905",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e43e4eb",
   "metadata": {
    "papermill": {
     "duration": 0.001362,
     "end_time": "2025-09-27T01:13:24.510405",
     "exception": false,
     "start_time": "2025-09-27T01:13:24.509043",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0b855dc5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T01:13:24.514447Z",
     "iopub.status.busy": "2025-09-27T01:13:24.514284Z",
     "iopub.status.idle": "2025-09-27T01:13:24.616288Z",
     "shell.execute_reply": "2025-09-27T01:13:24.613032Z"
    },
    "papermill": {
     "duration": 0.10701,
     "end_time": "2025-09-27T01:13:24.618836",
     "exception": false,
     "start_time": "2025-09-27T01:13:24.511826",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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Dz20mtk799xz46GHHor3338/pk+fHqNHj46jjjoqDjrooCr6nnvuuZg3b16thw4AAFBT7ev9FM5169ZFly5dmrbtsMMOsWHDhnjppZeqUzaPOOKIpn09e/aM3r17xxNPPFGjEQMAANSHuo69XXbZJfr37x833XRTLF26tHor/y6zfO+++260b98+evXqtcnn9OjRI5YsWVKzMQMAANSDDlHnJk6cGF//+terUziLDh06xH/+53/Gm2++GR07dqyCb2NlFrDMCDbXsGHDNruvnE7at2/fZn9tAACAllLXM3vvvPNOjBgxogqw22+/vXo7+uijq23F6tWrq1M6N1a2devWrUYjBgAAqA91PbN3//33x/Lly+Pqq6+uZvGKAQMGxOGHHx4LFy6sbr2waNGi6lq9RuXjY489ttnfc9asWZvdN3/+/D9o1hAAAKCl1PXM3vr166Ndu3abbNtuu+2qt+7du8cee+wRs2fPbtpXAnDBggUfeyomAABAW1DXM3vllgpTpkypbrdw5plnVtfrlVM5y4ze8OHD4+233672l/Dr1KlTTJ48udrep0+fWg8dAACgpuo69vbaa68q7q655po4++yzq8grq3Pecsstsdtuu1XX7q1cuTLGjh0ba9eurUKvLOgCAADQ1rVrKAXFFmm8Zq9r167Rr1+/qAfD35he6yEAAEBqD/c+PVpjl9T1NXsAAAA0j9gDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAl12NIHnnLKKVv8Rdu1axe33HJLc8cEAABAS8Xe2rVrq4j7OIsWLYr//d///cTHAQAAUCexN3PmzM3uW79+fUybNi1uuOGG2GWXXeL888/fVuMDAADgjxl7m/P888/HhAkT4pVXXonjjjsuxo8fXwUfAAAArTD2li9fHldddVXccccd0bNnz/jBD34QQ4cO3bajAwAAoOVi74EHHojLL788lixZEqeeemqMGTMmOnXq1LwRAAAAUNvY+93vfheXXHJJPProo3HAAQfEjTfeGAceeOC2HxUAAAAtE3vTp0+Pa6+9NhoaGmLs2LFx2mmnRfv2btMHAADQqmPvu9/9bnVLhXJ93kMPPVS9bU553K233rqtxggAAMAfK/YGDRq0tV8bAACAeo+9GTNm/HFHAgAAwDbjojsAAICExB4AAEBCYg8AACAhsQcAAJBQq4i9m266Kf7yL/8y+vfvH1/5ylfi+eefr7aXe/5NnTo1hg4dGgMHDoxRo0bF4sWLaz1cAACAmqv72PvhD38Y06ZNi3HjxsXtt98eu+++e/zLv/xLrF27tto+c+bMmDRpUrVa6KpVq2LkyJG1HjIAAEDN1XXsrVmzpprVK3H3hS98oZrZmzx5cqxcuTJee+21mD59eowePTqOOuqoOOigg6roe+6552LevHm1HjoAAEBN1XXsvfDCC/Huu+/Gl770paZtu+66azz++OOx3XbbVadsHnHEEU37evbsGb17944nnniiRiMGAABoZTdVr4Xf/OY3seOOO8Zjjz0WN954YyxdujQGDBgQY8eOjQULFkT79u2jV69em3xOjx49YsmSJc3+nsOGDdvsvjFjxkTfvn2b/bUBAABaSl3P7L333nuxevXq+I//+I8YP358XH/99VXgnXbaabFixYro2LFj9fHGunTpUu0DAABoy+p6Zm/Dhg3VQizf+c534sADD6y27bvvvk2zbyUEy2M2Dr6yrVu3bs3+nrNmzdrsvvnz5wtJAACgVajrmb3ddtutev9nf/ZnTdtKyHXv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kNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEio1cfemjVr4uKLL47BgwfHoEGD4oILLogVK1bUelgAAAA11epj74orrog5c+bElClT4uabb4758+fHhRdeWOthAQAA1FSHaMWWLVsWd911V1x//fUxZMiQatv48ePjlFNOiSVLlsRuu+1W6yECAADURKue2XvmmWeq942hVwwYMCA6dOgQTz75ZA1HBgAAUFutemZvwYIF0b179+jYsWPTtvLvXXfdtZrZa45hw4Ztdt+ll14a3bp1i5UrV1ani9aDkWv+rNZDAACA1OYvr4/n/o1KjxSrV6/OG3tlIZZOnTp9aHuXLl3+KIu0NEblhg0b6mYRmE9H11oPAQAAUluxtj6e+39Q6ZK0sVdm2VatWvWh7aVwy77mmDVr1mb3vfjii9Xqn+3bt48ddtgham3evHnV+/79+9d6KLRyjiW2BccR24pjiW3FsUTW46j0Tgm9jc9wTBd75RTOd955pwqwxh903bp11bZevXpt8+934IEHRj0566yzPjFQYUs4ltgWHEdsK44lthXHEm39OGrVC7SUe+s1NDTE008/3bRt7ty51bZyzz0AAIC2qlXHXjlV8/jjj68WTimR99hjj1U3VT/xxBOr6/YAAADaqlZ9GmcxYcKEuPzyy2PEiBHVLReOO+64GDduXK2HBQAAUFOtPvY6d+4cl112WfUGAABAgtM4AQAA+GjtGspqJgAAAKRiZg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7dW7NmjVx8cUXx+DBg2PQoEFxwQUXxIoVKzb7+Ntuuy2OPPLI+OxnPxunnXZavP766y06Xlr/cbRu3bq4+uqr4/Of/3wcdNBB8cUvfjF+8YtftPiYyfE7qdH//M//xIABA+L+++9vkXGS6zh6+OGH47jjjov+/fvH0UcfHT/96U9bdLzkOJYaGhpi+vTpccwxx8QhhxwSp556arz66qstPmbq19KlS+OAAw6o3m9OOY6mTp0aQ4cOjYEDB8aoUaNi8eLFUa/EXp274oorYs6cOTFlypS4+eabY/78+XHhhRd+5GPvu++++N73vhdjxoyJO+64I3r06BFnnnlmrFq1qsXHTes9jm644Ya4/fbb4/zzz4+f/OQn8dd//ddxzjnnxIsvvtji46Z1H0uN1q9fXx1PfhfRnOPo2WefjdGjR1exd9ddd8WXvvSl6rGvvfZai4+b1n0s/dd//Vdcd911ce6558Ytt9wSXbp0ibPOOmuLXrAiv7fffjsuv/zy6m/Wx5k2bVrMnDkzJk2aFDNmzKj+to0cOTLqVgN167333ms48MADGx599NGmbU899VRDv379GhYvXvyhx59wwgkN3/ve95o+XrlyZcOAAQMa7rvvvhYbM63/OBo6dGjDTTfdtMm2f/iHf2j49re/3SLjJc+x1KgcT9/4xjca9t13X7+P2Orj6Oyzz24YM2bMJttOPPHEhltvvbVFxkueY+lrX/taw2WXXdb08dKlSxv222+/hscee6zFxkx9mjBhQvU3qvFtyZIlH/m4DRs2NBx++OENt912W9O2N998s/qc559/vqEemdmrY88880z1fsiQIU3bymlQHTp0iCeffHKTxy5fvryaeTniiCOatnXq1CkOPvjgeOKJJ1pw1NSbrTmOVq9eHdttt121f2O77bZbvPPOOy00YjIcS41eeeWV6lXQ8mopbO1xVE4rL3/Dymzexsqr6l//+tdbaMRk+Z20bNmyajav0Q477BDt2rWrTgWlbRsxYkTcc889cdlll33s48ppv+WUzY2fb/fs2TN69+5dt8+3xV4dW7BgQXTv3j06duzYtK38e9ddd40lS5Zs8tg33ngjNmzYEHvttdcm28upnB98LG3L1hxH5Q/fY489Vl370Oi3v/1tdYrM/vvv36LjpnUfS41P1Mvpm+UUvA/+bqLt2prjaOHChbFy5cp4991346STTqquyTrhhBOqa/hga38nlSfod999d7z88svVi5tXXXVVFX/luKJt69mzZ/U8Z++99/7EY659+/bRq1evVvN8W+zVsXIOeZmd+6Dyi+mD55c3fvzBx3/UY2lbtuY4+qAHH3yweoJV/nCeccYZf8RRkvFY+v73vx9du3aNr33tay00QrIdR++99171viwa9ZWvfKWaJT788MPjn/7pn+Lpp59usTGT43fSt771rejcuXMcf/zx1Qxgud7q7LPPjp122qmFRkxrt2LFiuoFhRJ8reX5dodaD4DN69at20cuaFBejSr7PvjYorwCurFyasIHH0vbsjXHUaOyCtWECROq2Curu5bTGj71qU+1wGjJciy99NJL1QII5VX0cpoUNOc4KmesFP/4j/9YzegV5fKEcopeOeXq0EMPbaFRk+HvW1lEozxRv+mmm2L33XePRx99tHoh4TOf+Uz1tw4+STmuyvFVfjdtHHwf95yq1sReHSunJpTrpEqwNZ6iUE6LKts+OH28xx57VO9/97vfVecNNyoflyVkabu25jhqPG3qG9/4RvWLrKxaVpaohq09lsqT8XItcbl1x8bOO++8anamrKpI27Q1x1G5Xrjo27fvJtv32Wcf1xGzVcdSOXXzqaeeqm5R1fgiQbm90AsvvFDdykPssaXHXLn1wqJFi6pTPxuVj4899tioR07jrGPluqlyQG18qsrcuXOrbR88v3znnXeuXu2cNWtW07byROu5556LYcOGtei4ab3HUXHRRRdVp7mUV82FHs09lv7u7/4ufv7zn1fHUeNbMXbs2OqVdNqurTmOyrWeJfjKTPHGfvOb33woAGl7tuZY2txy+iUSy/XqsCX69etXTbDMnj17kxfJy7V89fp828xeHSvTweW88ksvvbS6l8f7778fEydOjBNPPLE6N7hcCFpOX2h89aqsTHbJJZfEfvvtF3vuuWdcc8018ad/+qdx2GGH1fpHoZUcR+X0zccff7x67O9///vqrVG5LqJcgEzbtTXHUrkG5qOugymvim589gFtz9YcR+U0qXK/2Ouvv756glXOVLn//vur2Ct/42jbtuZYKk/S99133+p50r/+679Wf8/K37uHHnoofvCDH9T6R6GOvfXWW9X7csyU30llLYNyX8fy96w8N5o8eXIMHz48+vTpE/WoXbn/Qq0HweaVa/DKkuXlhullKeFyU9lx48bF9ttvX61yV05J2HhVsh/+8Icxffr06kl6ecWr/PLzBJ0tPY6ef/75+OpXv/qRX+Nzn/tcdTE7bdvW/k7aWHkhaurUqXV7qgv1exz96Ec/qt7KkuflSXt5rBUU2dpjqRw/5UWCcq1euQ1DmR0u1/EdffTRtf4xqBNPPvlknHLKKdULAWVxuqJc2lI0Pgcqs8TlDJVyOcLatWur0CsvMuy4445Rj8QeAABAQq7ZAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAC10s95yY/k5c+bUeigAtBFiDwAAICGxBwAAkJDYA4BPcMYZZ8SgQYNi7dq1m2wfP358HHroobF69er45S9/GV/96ldj4MCBMXjw4Dj99NPj6aef3uzXPP/88+Pzn//8JtveeOON6lTPu+66q2nbypUr4zvf+U712IMPPjj+/u//Ph5++OE/wk8JQDZiDwA+wXHHHRfLli2Lp556qmlbCb+HHnoojj322HjppZdi9OjRsffee8cVV1xRhdz//d//xZlnnhnvvvtus7/v+vXr4+yzz46f/vSnVXD+27/9W/U9vvWtb8UvfvGLbfTTAZBVh1oPAADq3THHHBMTJ06sZu+GDh1abXv88cfjvffei7/927+NV155JQ455JAqxtq1a1ft/5M/+ZM47bTT4uWXX65m+prjvvvuqxZ2ueOOO6oZw+Kv/uqvqpCcMmVKfPGLX9yGPyUA2ZjZA4BPsOOOO8bw4cPjwQcfjIaGhmrbAw88EL169apO4yynVt52222xfPnyeOGFF6p9M2fObJqda67HHnssevToEfvuu2+sWLGi6a2c0vnb3/42lixZss1+RgDyMbMHAFvg+OOPr06dfPbZZ6N///5V+J100knVTN7ChQtjwoQJ1SzcrrvuGn369Ik999xzq79HY0g2Wrx4cbz11lvVrOFHKTN8u+22W7N/JgByE3sAsAWGDRsWu+yyS3UqZ5ldK9filVM4i3HjxlWzbGVGr1xTV5T76f385z/f7NdrPN1zYx+8vu9Tn/pU03WAH6Vnz55/4E8FQGZiDwC2wPbbbx9f+MIXqhm93//+99XKmJ/+9KerfWWBlhNOOKEp9IpPunl6ly5dqmgss3mN4Td37txNHvO5z30uHn300errdu/evWn7zTffXF0zOG3atG38UwKQidgDgK1YlfP222+PRYsWVbN5jcppnT/72c9in332iZ122ikeeeSR+O///u9qX4myfv36fehr/fmf/3nceuutceONN1ah+Otf/zpuueWWTR5TtpfvV1biPPXUU6trB2fPnh0/+clPqts+tG/v0nsANs9fCQDYQuXaub322is2bNhQzfI1KqdZluD77ne/G5MnT66u27v77rurlTtLwJVr+j6ofP6IESOq4CsrbJbZunI/vY117ty52n/QQQfFlVdeWQXm888/H5dddlkVfwDwcdo1fPBqcAAAAFo9M3sAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAIPL5fzlzzRIKODaoAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.131336,
   "end_time": "2025-09-27T01:13:25.066322",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2025-09-27T01:13:21.934986",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}