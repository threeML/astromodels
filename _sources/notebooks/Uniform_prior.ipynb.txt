{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d0b2de9b",
   "metadata": {
    "papermill": {
     "duration": 0.002071,
     "end_time": "2025-10-03T19:19:49.049108",
     "exception": false,
     "start_time": "2025-10-03T19:19:49.047037",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "816d53ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T19:19:49.053109Z",
     "iopub.status.busy": "2025-10-03T19:19:49.052876Z",
     "iopub.status.idle": "2025-10-03T19:19:51.666179Z",
     "shell.execute_reply": "2025-10-03T19:19:51.664969Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.618631,
     "end_time": "2025-10-03T19:19:51.669196",
     "exception": false,
     "start_time": "2025-10-03T19:19:49.050565",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "725cdf82",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T19:19:51.675372Z",
     "iopub.status.busy": "2025-10-03T19:19:51.674866Z",
     "iopub.status.idle": "2025-10-03T19:19:51.677413Z",
     "shell.execute_reply": "2025-10-03T19:19:51.676989Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.006851,
     "end_time": "2025-10-03T19:19:51.678670",
     "exception": false,
     "start_time": "2025-10-03T19:19:51.671819",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4db6486d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T19:19:51.682113Z",
     "iopub.status.busy": "2025-10-03T19:19:51.681934Z",
     "iopub.status.idle": "2025-10-03T19:19:51.684080Z",
     "shell.execute_reply": "2025-10-03T19:19:51.683618Z"
    },
    "papermill": {
     "duration": 0.005264,
     "end_time": "2025-10-03T19:19:51.685272",
     "exception": false,
     "start_time": "2025-10-03T19:19:51.680008",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c343408c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T19:19:51.688572Z",
     "iopub.status.busy": "2025-10-03T19:19:51.688377Z",
     "iopub.status.idle": "2025-10-03T19:19:51.698245Z",
     "shell.execute_reply": "2025-10-03T19:19:51.697248Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.013413,
     "end_time": "2025-10-03T19:19:51.700012",
     "exception": false,
     "start_time": "2025-10-03T19:19:51.686599",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d803ed6",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001311,
     "end_time": "2025-10-03T19:19:51.702859",
     "exception": false,
     "start_time": "2025-10-03T19:19:51.701548",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "968a82ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T19:19:51.707879Z",
     "iopub.status.busy": "2025-10-03T19:19:51.707560Z",
     "iopub.status.idle": "2025-10-03T19:19:51.712765Z",
     "shell.execute_reply": "2025-10-03T19:19:51.712084Z"
    },
    "papermill": {
     "duration": 0.009438,
     "end_time": "2025-10-03T19:19:51.714787",
     "exception": false,
     "start_time": "2025-10-03T19:19:51.705349",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ae9d115",
   "metadata": {
    "papermill": {
     "duration": 0.00122,
     "end_time": "2025-10-03T19:19:51.717628",
     "exception": false,
     "start_time": "2025-10-03T19:19:51.716408",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9dd2ee19",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T19:19:51.720910Z",
     "iopub.status.busy": "2025-10-03T19:19:51.720733Z",
     "iopub.status.idle": "2025-10-03T19:19:51.801132Z",
     "shell.execute_reply": "2025-10-03T19:19:51.800783Z"
    },
    "papermill": {
     "duration": 0.083579,
     "end_time": "2025-10-03T19:19:51.802375",
     "exception": false,
     "start_time": "2025-10-03T19:19:51.718796",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19ce1e6f",
   "metadata": {
    "papermill": {
     "duration": 0.001453,
     "end_time": "2025-10-03T19:19:51.805577",
     "exception": false,
     "start_time": "2025-10-03T19:19:51.804124",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ab53fc2b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T19:19:51.809321Z",
     "iopub.status.busy": "2025-10-03T19:19:51.809152Z",
     "iopub.status.idle": "2025-10-03T19:19:51.919060Z",
     "shell.execute_reply": "2025-10-03T19:19:51.918679Z"
    },
    "papermill": {
     "duration": 0.113429,
     "end_time": "2025-10-03T19:19:51.920508",
     "exception": false,
     "start_time": "2025-10-03T19:19:51.807079",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4.096178,
   "end_time": "2025-10-03T19:19:52.454207",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2025-10-03T19:19:48.358029",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}