{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cc0b31e5",
   "metadata": {
    "papermill": {
     "duration": 0.001743,
     "end_time": "2025-10-03T16:33:16.063962",
     "exception": false,
     "start_time": "2025-10-03T16:33:16.062219",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "51bd925f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T16:33:16.067955Z",
     "iopub.status.busy": "2025-10-03T16:33:16.067739Z",
     "iopub.status.idle": "2025-10-03T16:33:18.754372Z",
     "shell.execute_reply": "2025-10-03T16:33:18.753782Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.690539,
     "end_time": "2025-10-03T16:33:18.755890",
     "exception": false,
     "start_time": "2025-10-03T16:33:16.065351",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c308b189",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T16:33:18.759429Z",
     "iopub.status.busy": "2025-10-03T16:33:18.759066Z",
     "iopub.status.idle": "2025-10-03T16:33:18.761239Z",
     "shell.execute_reply": "2025-10-03T16:33:18.760863Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.00508,
     "end_time": "2025-10-03T16:33:18.762362",
     "exception": false,
     "start_time": "2025-10-03T16:33:18.757282",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6f8c9fef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T16:33:18.764950Z",
     "iopub.status.busy": "2025-10-03T16:33:18.764820Z",
     "iopub.status.idle": "2025-10-03T16:33:18.771055Z",
     "shell.execute_reply": "2025-10-03T16:33:18.770619Z"
    },
    "papermill": {
     "duration": 0.0087,
     "end_time": "2025-10-03T16:33:18.772107",
     "exception": false,
     "start_time": "2025-10-03T16:33:18.763407",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a8a662c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T16:33:18.774700Z",
     "iopub.status.busy": "2025-10-03T16:33:18.774573Z",
     "iopub.status.idle": "2025-10-03T16:33:18.780144Z",
     "shell.execute_reply": "2025-10-03T16:33:18.779669Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.008192,
     "end_time": "2025-10-03T16:33:18.781352",
     "exception": false,
     "start_time": "2025-10-03T16:33:18.773160",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1ef2cb1",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001043,
     "end_time": "2025-10-03T16:33:18.783595",
     "exception": false,
     "start_time": "2025-10-03T16:33:18.782552",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "741f6a3e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T16:33:18.786766Z",
     "iopub.status.busy": "2025-10-03T16:33:18.786599Z",
     "iopub.status.idle": "2025-10-03T16:33:18.791424Z",
     "shell.execute_reply": "2025-10-03T16:33:18.791013Z"
    },
    "papermill": {
     "duration": 0.008106,
     "end_time": "2025-10-03T16:33:18.792825",
     "exception": false,
     "start_time": "2025-10-03T16:33:18.784719",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b896570e",
   "metadata": {
    "papermill": {
     "duration": 0.001253,
     "end_time": "2025-10-03T16:33:18.795645",
     "exception": false,
     "start_time": "2025-10-03T16:33:18.794392",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "de513e05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T16:33:18.800265Z",
     "iopub.status.busy": "2025-10-03T16:33:18.799903Z",
     "iopub.status.idle": "2025-10-03T16:33:18.912212Z",
     "shell.execute_reply": "2025-10-03T16:33:18.911705Z"
    },
    "papermill": {
     "duration": 0.116541,
     "end_time": "2025-10-03T16:33:18.913461",
     "exception": false,
     "start_time": "2025-10-03T16:33:18.796920",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b603980",
   "metadata": {
    "papermill": {
     "duration": 0.001418,
     "end_time": "2025-10-03T16:33:18.916643",
     "exception": false,
     "start_time": "2025-10-03T16:33:18.915225",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f8116540",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T16:33:18.921067Z",
     "iopub.status.busy": "2025-10-03T16:33:18.920903Z",
     "iopub.status.idle": "2025-10-03T16:33:19.049545Z",
     "shell.execute_reply": "2025-10-03T16:33:19.049144Z"
    },
    "papermill": {
     "duration": 0.132307,
     "end_time": "2025-10-03T16:33:19.050850",
     "exception": false,
     "start_time": "2025-10-03T16:33:18.918543",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4.468708,
   "end_time": "2025-10-03T16:33:19.794638",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2025-10-03T16:33:15.325930",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}