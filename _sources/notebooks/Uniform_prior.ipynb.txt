{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d3d3155f",
   "metadata": {
    "papermill": {
     "duration": 0.00341,
     "end_time": "2025-10-03T17:30:55.327546",
     "exception": false,
     "start_time": "2025-10-03T17:30:55.324136",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "edeaa0ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T17:30:55.331310Z",
     "iopub.status.busy": "2025-10-03T17:30:55.331119Z",
     "iopub.status.idle": "2025-10-03T17:30:57.671244Z",
     "shell.execute_reply": "2025-10-03T17:30:57.670588Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.344108,
     "end_time": "2025-10-03T17:30:57.673143",
     "exception": false,
     "start_time": "2025-10-03T17:30:55.329035",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "98ffd69f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T17:30:57.678484Z",
     "iopub.status.busy": "2025-10-03T17:30:57.677796Z",
     "iopub.status.idle": "2025-10-03T17:30:57.681095Z",
     "shell.execute_reply": "2025-10-03T17:30:57.680547Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.008091,
     "end_time": "2025-10-03T17:30:57.682916",
     "exception": false,
     "start_time": "2025-10-03T17:30:57.674825",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "85299a98",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T17:30:57.686426Z",
     "iopub.status.busy": "2025-10-03T17:30:57.686155Z",
     "iopub.status.idle": "2025-10-03T17:30:57.688789Z",
     "shell.execute_reply": "2025-10-03T17:30:57.688177Z"
    },
    "papermill": {
     "duration": 0.006023,
     "end_time": "2025-10-03T17:30:57.690211",
     "exception": false,
     "start_time": "2025-10-03T17:30:57.684188",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7fc79559",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T17:30:57.694063Z",
     "iopub.status.busy": "2025-10-03T17:30:57.693812Z",
     "iopub.status.idle": "2025-10-03T17:30:57.699536Z",
     "shell.execute_reply": "2025-10-03T17:30:57.697926Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.010081,
     "end_time": "2025-10-03T17:30:57.701544",
     "exception": false,
     "start_time": "2025-10-03T17:30:57.691463",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78fc53a3",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001573,
     "end_time": "2025-10-03T17:30:57.704779",
     "exception": false,
     "start_time": "2025-10-03T17:30:57.703206",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "638883a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T17:30:57.708825Z",
     "iopub.status.busy": "2025-10-03T17:30:57.708478Z",
     "iopub.status.idle": "2025-10-03T17:30:57.715642Z",
     "shell.execute_reply": "2025-10-03T17:30:57.714699Z"
    },
    "papermill": {
     "duration": 0.011895,
     "end_time": "2025-10-03T17:30:57.717961",
     "exception": false,
     "start_time": "2025-10-03T17:30:57.706066",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5a8f876",
   "metadata": {
    "papermill": {
     "duration": 0.001524,
     "end_time": "2025-10-03T17:30:57.721055",
     "exception": false,
     "start_time": "2025-10-03T17:30:57.719531",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "394401f6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T17:30:57.725107Z",
     "iopub.status.busy": "2025-10-03T17:30:57.724837Z",
     "iopub.status.idle": "2025-10-03T17:30:57.868937Z",
     "shell.execute_reply": "2025-10-03T17:30:57.866405Z"
    },
    "papermill": {
     "duration": 0.14788,
     "end_time": "2025-10-03T17:30:57.870161",
     "exception": false,
     "start_time": "2025-10-03T17:30:57.722281",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "672786df",
   "metadata": {
    "papermill": {
     "duration": 0.001506,
     "end_time": "2025-10-03T17:30:57.873443",
     "exception": false,
     "start_time": "2025-10-03T17:30:57.871937",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a1f441db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T17:30:57.887882Z",
     "iopub.status.busy": "2025-10-03T17:30:57.887628Z",
     "iopub.status.idle": "2025-10-03T17:30:58.098764Z",
     "shell.execute_reply": "2025-10-03T17:30:58.097595Z"
    },
    "papermill": {
     "duration": 0.222909,
     "end_time": "2025-10-03T17:30:58.100299",
     "exception": false,
     "start_time": "2025-10-03T17:30:57.877390",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.873942,
   "end_time": "2025-10-03T17:30:58.534767",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2025-10-03T17:30:54.660825",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}