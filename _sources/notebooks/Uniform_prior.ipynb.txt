{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8175108c",
   "metadata": {
    "papermill": {
     "duration": 0.001477,
     "end_time": "2025-09-27T00:21:16.675748",
     "exception": false,
     "start_time": "2025-09-27T00:21:16.674271",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fbf9570d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:21:16.678802Z",
     "iopub.status.busy": "2025-09-27T00:21:16.678628Z",
     "iopub.status.idle": "2025-09-27T00:21:18.853140Z",
     "shell.execute_reply": "2025-09-27T00:21:18.852370Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.179559,
     "end_time": "2025-09-27T00:21:18.856513",
     "exception": false,
     "start_time": "2025-09-27T00:21:16.676954",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5d8757ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:21:18.861161Z",
     "iopub.status.busy": "2025-09-27T00:21:18.860562Z",
     "iopub.status.idle": "2025-09-27T00:21:18.864260Z",
     "shell.execute_reply": "2025-09-27T00:21:18.863133Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.008377,
     "end_time": "2025-09-27T00:21:18.866290",
     "exception": false,
     "start_time": "2025-09-27T00:21:18.857913",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "445b91b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:21:18.870253Z",
     "iopub.status.busy": "2025-09-27T00:21:18.869807Z",
     "iopub.status.idle": "2025-09-27T00:21:18.873800Z",
     "shell.execute_reply": "2025-09-27T00:21:18.872649Z"
    },
    "papermill": {
     "duration": 0.0081,
     "end_time": "2025-09-27T00:21:18.875751",
     "exception": false,
     "start_time": "2025-09-27T00:21:18.867651",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7ba2396d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:21:18.879689Z",
     "iopub.status.busy": "2025-09-27T00:21:18.879490Z",
     "iopub.status.idle": "2025-09-27T00:21:18.883580Z",
     "shell.execute_reply": "2025-09-27T00:21:18.882568Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.008278,
     "end_time": "2025-09-27T00:21:18.885531",
     "exception": false,
     "start_time": "2025-09-27T00:21:18.877253",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "887ac466",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001439,
     "end_time": "2025-09-27T00:21:18.888351",
     "exception": false,
     "start_time": "2025-09-27T00:21:18.886912",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4f60c56c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:21:18.892241Z",
     "iopub.status.busy": "2025-09-27T00:21:18.892027Z",
     "iopub.status.idle": "2025-09-27T00:21:18.898405Z",
     "shell.execute_reply": "2025-09-27T00:21:18.897588Z"
    },
    "papermill": {
     "duration": 0.010877,
     "end_time": "2025-09-27T00:21:18.900686",
     "exception": false,
     "start_time": "2025-09-27T00:21:18.889809",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e13eae9f",
   "metadata": {
    "papermill": {
     "duration": 0.001538,
     "end_time": "2025-09-27T00:21:18.903925",
     "exception": false,
     "start_time": "2025-09-27T00:21:18.902387",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "232c837c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:21:18.907871Z",
     "iopub.status.busy": "2025-09-27T00:21:18.907651Z",
     "iopub.status.idle": "2025-09-27T00:21:19.040777Z",
     "shell.execute_reply": "2025-09-27T00:21:19.038580Z"
    },
    "papermill": {
     "duration": 0.137711,
     "end_time": "2025-09-27T00:21:19.043016",
     "exception": false,
     "start_time": "2025-09-27T00:21:18.905305",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98433bc6",
   "metadata": {
    "papermill": {
     "duration": 0.002333,
     "end_time": "2025-09-27T00:21:19.048318",
     "exception": false,
     "start_time": "2025-09-27T00:21:19.045985",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "610190b4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T00:21:19.054483Z",
     "iopub.status.busy": "2025-09-27T00:21:19.053844Z",
     "iopub.status.idle": "2025-09-27T00:21:19.234868Z",
     "shell.execute_reply": "2025-09-27T00:21:19.233347Z"
    },
    "papermill": {
     "duration": 0.187277,
     "end_time": "2025-09-27T00:21:19.237920",
     "exception": false,
     "start_time": "2025-09-27T00:21:19.050643",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.863405,
   "end_time": "2025-09-27T00:21:19.777205",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2025-09-27T00:21:15.913800",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}