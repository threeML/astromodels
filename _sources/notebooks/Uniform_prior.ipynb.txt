{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "163ec5d2",
   "metadata": {
    "papermill": {
     "duration": 0.002335,
     "end_time": "2025-09-23T20:59:18.734702",
     "exception": false,
     "start_time": "2025-09-23T20:59:18.732367",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "70180fb1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T20:59:18.739780Z",
     "iopub.status.busy": "2025-09-23T20:59:18.739470Z",
     "iopub.status.idle": "2025-09-23T20:59:21.876085Z",
     "shell.execute_reply": "2025-09-23T20:59:21.875045Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 3.141424,
     "end_time": "2025-09-23T20:59:21.877900",
     "exception": false,
     "start_time": "2025-09-23T20:59:18.736476",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d4c46ad2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T20:59:21.882483Z",
     "iopub.status.busy": "2025-09-23T20:59:21.881633Z",
     "iopub.status.idle": "2025-09-23T20:59:21.888686Z",
     "shell.execute_reply": "2025-09-23T20:59:21.887705Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.011844,
     "end_time": "2025-09-23T20:59:21.891232",
     "exception": false,
     "start_time": "2025-09-23T20:59:21.879388",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "32a34208",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T20:59:21.898255Z",
     "iopub.status.busy": "2025-09-23T20:59:21.898057Z",
     "iopub.status.idle": "2025-09-23T20:59:21.900734Z",
     "shell.execute_reply": "2025-09-23T20:59:21.899903Z"
    },
    "papermill": {
     "duration": 0.008154,
     "end_time": "2025-09-23T20:59:21.903056",
     "exception": false,
     "start_time": "2025-09-23T20:59:21.894902",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0bd597c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T20:59:21.908391Z",
     "iopub.status.busy": "2025-09-23T20:59:21.908192Z",
     "iopub.status.idle": "2025-09-23T20:59:21.912432Z",
     "shell.execute_reply": "2025-09-23T20:59:21.911758Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.008265,
     "end_time": "2025-09-23T20:59:21.914489",
     "exception": false,
     "start_time": "2025-09-23T20:59:21.906224",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69b41408",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.00358,
     "end_time": "2025-09-23T20:59:21.921807",
     "exception": false,
     "start_time": "2025-09-23T20:59:21.918227",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e9f01281",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T20:59:21.928303Z",
     "iopub.status.busy": "2025-09-23T20:59:21.927866Z",
     "iopub.status.idle": "2025-09-23T20:59:21.935727Z",
     "shell.execute_reply": "2025-09-23T20:59:21.934720Z"
    },
    "papermill": {
     "duration": 0.011572,
     "end_time": "2025-09-23T20:59:21.936867",
     "exception": false,
     "start_time": "2025-09-23T20:59:21.925295",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc2a718b",
   "metadata": {
    "papermill": {
     "duration": 0.004247,
     "end_time": "2025-09-23T20:59:21.943592",
     "exception": false,
     "start_time": "2025-09-23T20:59:21.939345",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "dbe05afe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T20:59:21.950780Z",
     "iopub.status.busy": "2025-09-23T20:59:21.950568Z",
     "iopub.status.idle": "2025-09-23T20:59:22.120052Z",
     "shell.execute_reply": "2025-09-23T20:59:22.117752Z"
    },
    "papermill": {
     "duration": 0.175024,
     "end_time": "2025-09-23T20:59:22.122511",
     "exception": false,
     "start_time": "2025-09-23T20:59:21.947487",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31a38f15",
   "metadata": {
    "papermill": {
     "duration": 0.00164,
     "end_time": "2025-09-23T20:59:22.125942",
     "exception": false,
     "start_time": "2025-09-23T20:59:22.124302",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d71ba14b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T20:59:22.130605Z",
     "iopub.status.busy": "2025-09-23T20:59:22.130415Z",
     "iopub.status.idle": "2025-09-23T20:59:22.321311Z",
     "shell.execute_reply": "2025-09-23T20:59:22.319815Z"
    },
    "papermill": {
     "duration": 0.195625,
     "end_time": "2025-09-23T20:59:22.322981",
     "exception": false,
     "start_time": "2025-09-23T20:59:22.127356",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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9gAAABISewAAAAm1qdi76667Yu+994633nqr+njt2rVxwQUXxLBhw2Lo0KFx7rnnxsqVK2s9TAAAgJprM7H3+uuvxyWXXLLJtksvvTTmzp0b06dPjxtvvDEWLFgQ5513Xs3GCAAAUC/aTOyViNtnn32aP16+fHnccccd8Z3vfCcOOeSQGDJkSEyaNCnuu+++WLZsWU3HCgAAUGttIvZuv/32ePPNN+OMM85o3vbUU09V70voNRk8eHB06tQpHn/88ZqMEwAAoF50ijr32muvxb/927/Fj3/842o2r8nChQujV69e0blz5+Zt5c89e/b8g2b2RowYsdl948ePjwEDBrT4awMAALSWup7Za2xsrBZdOeGEEzY5hbMoC7F06dLlA5/TrVs3i7QAAADtXl3P7N16663x9ttvx+jRoz+wr0ePHrF69eoPbF+zZk21r6Vmz5692X1lARghCQAAtAV1HXtz5syJl19+OQ488MDmmb7iz//8z2O33XarruMrt19oOpVz/fr11ba+ffvWdNwAAAC1VtexV+6ht2LFiuaP58+fHxMnToyZM2fG7rvvXkXfk08+GYceemi1f968eVUQlnvuAQAAtGd1HXu9e/eu3posXbq0er/HHntUC7Ecc8wxcdFFF8XUqVPj3XffjSlTpsRxxx1XXbcHAADQntV17H2cyZMnVzdaL9f0lVsujBo1qpr5AwAAaO86NDZdCMfHalqgpXv37jFw4MCoByMXN9R6CAAAkNqD/U6JttgldX3rBQAAAFpG7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGx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cdSmF2gp99ZrbGyMJ598snnbvHnzqm3lnnsAAADtVZuOvXKq5jHHHFMtnFIi75FHHqluqn7cccdV1+0BAAC0V236NM5i8uTJcckll8To0aOrWy6MGjUqJk6cWOthAQAA1FSbj72uXbvGxRdfXL0BAACQ4DROAAAAPlyHxrKaCQAAAKmY2QMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQEJiDwAAICGxBwAAkJDYAwAASEjsAQAAJCT2AAAAEhJ7AAAACYk9AACAhMReHVu7dm1ccMEFMWzYsBg6dGice+65sXLlys0+/pZbbokjjjgiPve5z8XJJ58cr776aquOlxzH0vr16+OKK66Iww8/PPbff//40pe+FL/4xS9afczk+LnU5H/+539i8ODBce+997bKOMl1HD344IMxatSoGDRoUHzhC1+In/3sZ606XnIcS42NjdHQ0BBHHXVUHHjggXHSSSfFyy+/3Opjpr699dZbse+++1bvN6ccS1deeWUMHz48hgwZEmPHjo2lS5dGPRJ7dezSSy+NuXPnxvTp0+PGG2+MBQsWxHnnnfehj73nnnvi+9//fowfPz5uu+226N27d5x22mmxevXqVh83bftYuvbaa+PWW2+Nc845J37605/GX/3VX8WZZ54Zzz//fKuPm7Z9LDV57733quPJzyNachw9/fTTMW7cuCr27rjjjvjyl79cPfaVV15p9XHTto+l//zP/4yrr746zjrrrLjpppuiW7ducfrpp3+iF6xoH95444245JJLqt9bH2XGjBkxa9asmDp1asycObP6/TZmzJioS43UpXfeeadxv/32a3z44Yebtz3xxBONAwcObFy6dOkHHn/sscc2fv/732/+eNWqVY2DBw9uvOeee1ptzOQ4loYPH954ww03bLLt7//+7xu/853vtMp4yXMsNSnH0ze/+c3Gvfbay88ktvg4OuOMMxrHjx+/ybbjjjuu8eabb26V8ZLnWPr617/eePHFFzd//NZbbzXuvffejY888kirjZn6NXny5Or3VNPbsmXLPvRxGzZsaDz00EMbb7nlluZtr732WvU5zz77bGO9MbNXp5566qnq/SGHHNK8rZwC1alTp3j88cc3eeyKFSuqWZfDDjuseVuXLl3igAMOiMcee6wVR0092pJjac2aNbHNNttU+ze28847x5tvvtlKIybDsdTkpZdeql4BLa+UwpYeR+W08vJ7rMzmbay8ov6Nb3yjlUZMlp9Jy5cvr2bzmmy33XbRoUOH6lRQGD16dNx1111x8cUXf+Tjyqm/5ZTNjZ939+nTJ/r161eXz7vFXp1auHBh9OrVKzp37ty8rfy5Z8+esWzZsk0eu3jx4tiwYUPsvvvum2wvp3K+/7G0P1tyLJVffI888kh17UOT3/72t9UpMvvss0+rjpu2fSw1PVEvp2+WU/De//OJ9mtLjqNFixbFqlWr4u23347jjz++uibr2GOPra7hgy39mVSenN95553x4osvVi9uXn755VX8leMK+vTpUz3X2WOPPT72uOvYsWP07du3TTzvFnt1qpw/Xmbn3q/8UHr/ueVNH7//8R/2WNqfLTmW3u/++++vnmCVX5ynnnrqpzhKMh5L119/fXTv3j2+/vWvt9IIyXYcvfPOO9X7smjUV7/61WqW+NBDD41//Md/jCeffLLVxkyOn0nf/va3o2vXrnHMMcdUM4DlWqszzjgjdthhh1YaMRmsXLmyelGhBF9beN7dqdYD4MP16NHjQxczKK9ElX3vf2xRXv3cWDkt4f2Ppf3ZkmOpSVmBavLkyVXslRVeyykNn/nMZ1phtGQ5ll544YVqAYTyKno5TQpachyVs1aKf/iHf6hm9IpyiUI5Ra+cbnXQQQe10qjJ8PutLKBRnqTfcMMNscsuu8TDDz9cvZDw2c9+tvpdB59EObbKMVZ+Pm0cfB/1vKqWxF6dKqcllGukSrA1nZ5QTokq294/bbzrrrtW73/3u99V5ws3KR+XpWNp37bkWGo6beqb3/xm9UOsrFpWlqiGLT2WypPxcj1xuXXHxs4+++xqdqasqkj7tCXHUbleuBgwYMAm2/fcc0/XEbNFx1I5dfOJJ56oblPV9CJBub3Qc889V93KQ+yxJcddufXCkiVLqlM/m5SPjz766Kg3TuOsU+WaqXIgbXyayrx586pt7z+3fMcdd6xe6Zw9e3bztvIk65lnnokRI0a06rhp28dScf7551enuZRXzYUeLT2W/vZv/zZ+/vOfV8dR01sxYcKE6pV02q8tOY7KtZ4l+MpM8cZ+85vffCAAaX+25Fja3FL6JRLL9erwSQ0cOLCaaJkzZ84mL5SXa/nq8Xm3mb06VaaByznlF110UXUPj3fffTemTJkSxx13XHVOcLkAtJy60PTKVVmV7MILL4y99947dtttt7jqqqvij//4j+Pggw+u9bdCGzqWyumbjz76aPXY3//+99Vbk3JdRLn4mPZrS46lcg3Mh10HU14R3fgMBNqfLTmOyilS5Z6x11xzTfXkqpytcu+991axV37P0b5tybFUnqDvtdde1XOlf/mXf6l+n5Xfdw888ED88Ic/rPW3Qp17/fXXq/fluCk/l8p6BuXejuV3Wnl+NG3atBg5cmT0798/6k2Hcv+FWg+CD1euwSvLlZcbppdlhMsNZSdOnBjbbrtttcJdOR1h4xXJfvSjH0VDQ0P1BL282lV+8HlyzpYcS88++2x87Wtf+9Cv8fnPf766mJ32bUt/Lm2svBh15ZVX1uVpLtT3cfTjH/+4eivLnZcn7eWxVlBkS4+lcvyUFwnKtXrlNgxldrhcx/eFL3yh1t8GdeTxxx+PE088sXoxoCxQV5TLW4qm50FlpricpVIuSVi3bl0VeuWFhu233z7qjdgDAABIyDV7AAAACYk9AACAhMQeAABAQmIPAAAgIbEHAACQkNgDAABISOwBAAAkJPYAoJVu1FtuLD937txaDwWAdkLsAQAAJCT2AAAAEhJ7APAxTj311Bg6dGisW7duk+2TJk2Kgw46KNasWRO//OUv42tf+1oMGTIkhg0bFqeccko8+eSTm/2a55xzThx++OGbbFu8eHF1qucdd9zRvG3VqlXx3e9+t3rsAQccEH/3d38XDz744KfwXQKQjdgDgI8xatSoWL58eTzxxBPN20r4PfDAA3H00UfHCy+8EOPGjYs99tgjLr300irk/u///i9OO+20ePvtt1v897733ntxxhlnxM9+9rMqOP/1X/+1+ju+/e1vxy9+8Yut9N0BkFWnWg8AAOrdUUcdFVOmTKlm74YPH15te/TRR+Odd96Jv/mbv4mXXnopDjzwwCrGOnToUO3/oz/6ozj55JPjxRdfrGb6WuKee+6pFna57bbbqhnD4i//8i+rkJw+fXp86Utf2orfJQDZmNkDgI+x/fbbx8iRI+P++++PxsbGatt9990Xffv2rU7jLKdW3nLLLbFixYp47rnnqn2zZs1qnp1rqUceeSR69+4de+21V6xcubL5rZzS+dvf/jaWLVu21b5HAPIxswcAn8AxxxxTnTr59NNPx6BBg6rwO/7446uZvEWLFsXkyZOrWbiePXtG//79Y7fddtviv6MpJJssXbo0Xn/99WrW8MOUGb6dd965xd8TALmJPQD4BEaMGBE77bRTdSpnmV0r1+KVUziLiRMnVrNsZUavXFNXlPvp/fznP9/s12s63XNj77++7zOf+UzzdYAfpk+fPn/gdwVAZmIPAD6BbbfdNr74xS9WM3q///3vq5Ux/+RP/qTaVxZoOfbYY5tDr/i4m6d369atisYym9cUfvPmzdvkMZ///Ofj4Ycfrr5ur169mrffeOON1TWDM2bM2MrfJQCZiD0A2IJVOW+99dZYsmRJNZvXpJzW+V//9V+x5557xg477BAPPfRQ/Pd//3e1r0TZwIEDP/C1/uzP/ixuvvnmuO6666pQ/PWvfx033XTTJo8p28vfV1biPOmkk6prB+fMmRM//elPq9s+dOzo0nsANs9vCQD4hMq1c7vvvnts2LChmuVrUk6zLMH3ve99L6ZNm1Zdt3fnnXdWK3eWgCvX9L1f+fzRo0dXwVdW2CyzdeV+ehvr2rVrtX///fePyy67rArMZ599Ni6++OIq/gDgo3RofP/V4AAAALR5ZvYAAAASEnsAAAAJiT0AAICExB4AAEBCYg8AACAhsQcAAJCQ2AMAAEhI7AEAACQk9gAAABISewAAAAmJPQAAgITEHgAAQOTz/wA8kMIJvuLjBwAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4.930555,
   "end_time": "2025-09-23T20:59:22.866492",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2025-09-23T20:59:17.935937",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}