{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "43563954",
   "metadata": {
    "papermill": {
     "duration": 0.002223,
     "end_time": "2025-10-03T17:16:55.637068",
     "exception": false,
     "start_time": "2025-10-03T17:16:55.634845",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c7934702",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T17:16:55.645460Z",
     "iopub.status.busy": "2025-10-03T17:16:55.644878Z",
     "iopub.status.idle": "2025-10-03T17:16:58.876164Z",
     "shell.execute_reply": "2025-10-03T17:16:58.875303Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 3.237777,
     "end_time": "2025-10-03T17:16:58.877857",
     "exception": false,
     "start_time": "2025-10-03T17:16:55.640080",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "78db9841",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T17:16:58.883948Z",
     "iopub.status.busy": "2025-10-03T17:16:58.883460Z",
     "iopub.status.idle": "2025-10-03T17:16:58.887465Z",
     "shell.execute_reply": "2025-10-03T17:16:58.885728Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.009482,
     "end_time": "2025-10-03T17:16:58.889511",
     "exception": false,
     "start_time": "2025-10-03T17:16:58.880029",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "25ba57e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T17:16:58.893297Z",
     "iopub.status.busy": "2025-10-03T17:16:58.893112Z",
     "iopub.status.idle": "2025-10-03T17:16:58.895734Z",
     "shell.execute_reply": "2025-10-03T17:16:58.895030Z"
    },
    "papermill": {
     "duration": 0.007662,
     "end_time": "2025-10-03T17:16:58.898590",
     "exception": false,
     "start_time": "2025-10-03T17:16:58.890928",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "76f5aa65",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T17:16:58.910330Z",
     "iopub.status.busy": "2025-10-03T17:16:58.909782Z",
     "iopub.status.idle": "2025-10-03T17:16:58.917645Z",
     "shell.execute_reply": "2025-10-03T17:16:58.916697Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.014486,
     "end_time": "2025-10-03T17:16:58.920012",
     "exception": false,
     "start_time": "2025-10-03T17:16:58.905526",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9aff2a5",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.004255,
     "end_time": "2025-10-03T17:16:58.928699",
     "exception": false,
     "start_time": "2025-10-03T17:16:58.924444",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d3a90170",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T17:16:58.936959Z",
     "iopub.status.busy": "2025-10-03T17:16:58.936753Z",
     "iopub.status.idle": "2025-10-03T17:16:58.944653Z",
     "shell.execute_reply": "2025-10-03T17:16:58.944068Z"
    },
    "papermill": {
     "duration": 0.013809,
     "end_time": "2025-10-03T17:16:58.946319",
     "exception": false,
     "start_time": "2025-10-03T17:16:58.932510",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8cd3b420",
   "metadata": {
    "papermill": {
     "duration": 0.003448,
     "end_time": "2025-10-03T17:16:58.951521",
     "exception": false,
     "start_time": "2025-10-03T17:16:58.948073",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3a1f5f92",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T17:16:58.955316Z",
     "iopub.status.busy": "2025-10-03T17:16:58.955095Z",
     "iopub.status.idle": "2025-10-03T17:16:59.160374Z",
     "shell.execute_reply": "2025-10-03T17:16:59.159875Z"
    },
    "papermill": {
     "duration": 0.208929,
     "end_time": "2025-10-03T17:16:59.161929",
     "exception": false,
     "start_time": "2025-10-03T17:16:58.953000",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17f441e1",
   "metadata": {
    "papermill": {
     "duration": 0.002085,
     "end_time": "2025-10-03T17:16:59.166495",
     "exception": false,
     "start_time": "2025-10-03T17:16:59.164410",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "74f01f32",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-03T17:16:59.173098Z",
     "iopub.status.busy": "2025-10-03T17:16:59.172381Z",
     "iopub.status.idle": "2025-10-03T17:16:59.419085Z",
     "shell.execute_reply": "2025-10-03T17:16:59.413721Z"
    },
    "papermill": {
     "duration": 0.251982,
     "end_time": "2025-10-03T17:16:59.421113",
     "exception": false,
     "start_time": "2025-10-03T17:16:59.169131",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5.347629,
   "end_time": "2025-10-03T17:17:00.072162",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2025-10-03T17:16:54.724533",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}