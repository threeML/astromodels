{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4f1b9cb0",
   "metadata": {
    "papermill": {
     "duration": 0.001617,
     "end_time": "2025-10-06T05:24:13.493186",
     "exception": false,
     "start_time": "2025-10-06T05:24:13.491569",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "10ac2761",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T05:24:13.496480Z",
     "iopub.status.busy": "2025-10-06T05:24:13.496284Z",
     "iopub.status.idle": "2025-10-06T05:24:15.777055Z",
     "shell.execute_reply": "2025-10-06T05:24:15.776301Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.283883,
     "end_time": "2025-10-06T05:24:15.778353",
     "exception": false,
     "start_time": "2025-10-06T05:24:13.494470",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a37f4ae1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T05:24:15.782130Z",
     "iopub.status.busy": "2025-10-06T05:24:15.781714Z",
     "iopub.status.idle": "2025-10-06T05:24:15.784043Z",
     "shell.execute_reply": "2025-10-06T05:24:15.783656Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.005232,
     "end_time": "2025-10-06T05:24:15.785057",
     "exception": false,
     "start_time": "2025-10-06T05:24:15.779825",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ffd6159f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T05:24:15.788144Z",
     "iopub.status.busy": "2025-10-06T05:24:15.787972Z",
     "iopub.status.idle": "2025-10-06T05:24:15.790393Z",
     "shell.execute_reply": "2025-10-06T05:24:15.789982Z"
    },
    "papermill": {
     "duration": 0.005104,
     "end_time": "2025-10-06T05:24:15.791434",
     "exception": false,
     "start_time": "2025-10-06T05:24:15.786330",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bb52b17c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T05:24:15.794903Z",
     "iopub.status.busy": "2025-10-06T05:24:15.794731Z",
     "iopub.status.idle": "2025-10-06T05:24:15.798089Z",
     "shell.execute_reply": "2025-10-06T05:24:15.797622Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.006322,
     "end_time": "2025-10-06T05:24:15.799153",
     "exception": false,
     "start_time": "2025-10-06T05:24:15.792831",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e933af2",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001185,
     "end_time": "2025-10-06T05:24:15.801697",
     "exception": false,
     "start_time": "2025-10-06T05:24:15.800512",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8006bb2c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T05:24:15.805054Z",
     "iopub.status.busy": "2025-10-06T05:24:15.804837Z",
     "iopub.status.idle": "2025-10-06T05:24:15.812872Z",
     "shell.execute_reply": "2025-10-06T05:24:15.812277Z"
    },
    "papermill": {
     "duration": 0.011318,
     "end_time": "2025-10-06T05:24:15.814149",
     "exception": false,
     "start_time": "2025-10-06T05:24:15.802831",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46df7764",
   "metadata": {
    "papermill": {
     "duration": 0.0013,
     "end_time": "2025-10-06T05:24:15.817037",
     "exception": false,
     "start_time": "2025-10-06T05:24:15.815737",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4403b425",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T05:24:15.820202Z",
     "iopub.status.busy": "2025-10-06T05:24:15.820033Z",
     "iopub.status.idle": "2025-10-06T05:24:15.935131Z",
     "shell.execute_reply": "2025-10-06T05:24:15.931559Z"
    },
    "papermill": {
     "duration": 0.118088,
     "end_time": "2025-10-06T05:24:15.936323",
     "exception": false,
     "start_time": "2025-10-06T05:24:15.818235",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef93f34b",
   "metadata": {
    "papermill": {
     "duration": 0.001433,
     "end_time": "2025-10-06T05:24:15.939604",
     "exception": false,
     "start_time": "2025-10-06T05:24:15.938171",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d345bed2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-06T05:24:15.943997Z",
     "iopub.status.busy": "2025-10-06T05:24:15.943789Z",
     "iopub.status.idle": "2025-10-06T05:24:16.100439Z",
     "shell.execute_reply": "2025-10-06T05:24:16.099942Z"
    },
    "papermill": {
     "duration": 0.160741,
     "end_time": "2025-10-06T05:24:16.101682",
     "exception": false,
     "start_time": "2025-10-06T05:24:15.940941",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.715436,
   "end_time": "2025-10-06T05:24:16.628312",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2025-10-06T05:24:12.912876",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}