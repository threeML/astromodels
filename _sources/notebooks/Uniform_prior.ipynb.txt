{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5a677e45",
   "metadata": {
    "papermill": {
     "duration": 0.006319,
     "end_time": "2025-10-02T02:20:37.933416",
     "exception": false,
     "start_time": "2025-10-02T02:20:37.927097",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5f576f0e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T02:20:37.945975Z",
     "iopub.status.busy": "2025-10-02T02:20:37.945473Z",
     "iopub.status.idle": "2025-10-02T02:20:39.856896Z",
     "shell.execute_reply": "2025-10-02T02:20:39.855794Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.919555,
     "end_time": "2025-10-02T02:20:39.858666",
     "exception": false,
     "start_time": "2025-10-02T02:20:37.939111",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "190bbaae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T02:20:39.864694Z",
     "iopub.status.busy": "2025-10-02T02:20:39.864286Z",
     "iopub.status.idle": "2025-10-02T02:20:39.871149Z",
     "shell.execute_reply": "2025-10-02T02:20:39.870168Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.012018,
     "end_time": "2025-10-02T02:20:39.872883",
     "exception": false,
     "start_time": "2025-10-02T02:20:39.860865",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5acf4f1d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T02:20:39.876432Z",
     "iopub.status.busy": "2025-10-02T02:20:39.876225Z",
     "iopub.status.idle": "2025-10-02T02:20:39.883985Z",
     "shell.execute_reply": "2025-10-02T02:20:39.883238Z"
    },
    "papermill": {
     "duration": 0.011359,
     "end_time": "2025-10-02T02:20:39.885641",
     "exception": false,
     "start_time": "2025-10-02T02:20:39.874282",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a9377374",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T02:20:39.888794Z",
     "iopub.status.busy": "2025-10-02T02:20:39.888623Z",
     "iopub.status.idle": "2025-10-02T02:20:39.892061Z",
     "shell.execute_reply": "2025-10-02T02:20:39.891373Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.006456,
     "end_time": "2025-10-02T02:20:39.893391",
     "exception": false,
     "start_time": "2025-10-02T02:20:39.886935",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e63be36",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001153,
     "end_time": "2025-10-02T02:20:39.895869",
     "exception": false,
     "start_time": "2025-10-02T02:20:39.894716",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7d7efdf5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T02:20:39.898922Z",
     "iopub.status.busy": "2025-10-02T02:20:39.898719Z",
     "iopub.status.idle": "2025-10-02T02:20:39.905069Z",
     "shell.execute_reply": "2025-10-02T02:20:39.904529Z"
    },
    "papermill": {
     "duration": 0.009571,
     "end_time": "2025-10-02T02:20:39.906497",
     "exception": false,
     "start_time": "2025-10-02T02:20:39.896926",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "825e4a45",
   "metadata": {
    "papermill": {
     "duration": 0.001386,
     "end_time": "2025-10-02T02:20:39.909412",
     "exception": false,
     "start_time": "2025-10-02T02:20:39.908026",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b793c087",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T02:20:39.913885Z",
     "iopub.status.busy": "2025-10-02T02:20:39.913688Z",
     "iopub.status.idle": "2025-10-02T02:20:40.060538Z",
     "shell.execute_reply": "2025-10-02T02:20:40.055878Z"
    },
    "papermill": {
     "duration": 0.15057,
     "end_time": "2025-10-02T02:20:40.061854",
     "exception": false,
     "start_time": "2025-10-02T02:20:39.911284",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de2e9a2f",
   "metadata": {
    "papermill": {
     "duration": 0.001435,
     "end_time": "2025-10-02T02:20:40.065153",
     "exception": false,
     "start_time": "2025-10-02T02:20:40.063718",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c7a9283e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T02:20:40.070648Z",
     "iopub.status.busy": "2025-10-02T02:20:40.069143Z",
     "iopub.status.idle": "2025-10-02T02:20:40.216467Z",
     "shell.execute_reply": "2025-10-02T02:20:40.213456Z"
    },
    "papermill": {
     "duration": 0.150753,
     "end_time": "2025-10-02T02:20:40.217514",
     "exception": false,
     "start_time": "2025-10-02T02:20:40.066761",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.329821,
   "end_time": "2025-10-02T02:20:40.648802",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2025-10-02T02:20:37.318981",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}