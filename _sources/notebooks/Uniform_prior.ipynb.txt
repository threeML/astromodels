{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0eb27c7e",
   "metadata": {
    "papermill": {
     "duration": 0.001473,
     "end_time": "2025-09-26T21:43:19.646395",
     "exception": false,
     "start_time": "2025-09-26T21:43:19.644922",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c55856cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T21:43:19.649613Z",
     "iopub.status.busy": "2025-09-26T21:43:19.649439Z",
     "iopub.status.idle": "2025-09-26T21:43:22.161114Z",
     "shell.execute_reply": "2025-09-26T21:43:22.159360Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.517365,
     "end_time": "2025-09-26T21:43:22.164980",
     "exception": false,
     "start_time": "2025-09-26T21:43:19.647615",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0b1938b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T21:43:22.172776Z",
     "iopub.status.busy": "2025-09-26T21:43:22.171859Z",
     "iopub.status.idle": "2025-09-26T21:43:22.181224Z",
     "shell.execute_reply": "2025-09-26T21:43:22.179281Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.017401,
     "end_time": "2025-09-26T21:43:22.184611",
     "exception": false,
     "start_time": "2025-09-26T21:43:22.167210",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "93426c0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T21:43:22.189786Z",
     "iopub.status.busy": "2025-09-26T21:43:22.189365Z",
     "iopub.status.idle": "2025-09-26T21:43:22.193650Z",
     "shell.execute_reply": "2025-09-26T21:43:22.192479Z"
    },
    "papermill": {
     "duration": 0.010668,
     "end_time": "2025-09-26T21:43:22.196975",
     "exception": false,
     "start_time": "2025-09-26T21:43:22.186307",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c0729f23",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T21:43:22.202672Z",
     "iopub.status.busy": "2025-09-26T21:43:22.202134Z",
     "iopub.status.idle": "2025-09-26T21:43:22.209533Z",
     "shell.execute_reply": "2025-09-26T21:43:22.208033Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.013293,
     "end_time": "2025-09-26T21:43:22.211741",
     "exception": false,
     "start_time": "2025-09-26T21:43:22.198448",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc0ef31a",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001389,
     "end_time": "2025-09-26T21:43:22.214715",
     "exception": false,
     "start_time": "2025-09-26T21:43:22.213326",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6811a4b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T21:43:22.218642Z",
     "iopub.status.busy": "2025-09-26T21:43:22.218445Z",
     "iopub.status.idle": "2025-09-26T21:43:22.225467Z",
     "shell.execute_reply": "2025-09-26T21:43:22.224372Z"
    },
    "papermill": {
     "duration": 0.011353,
     "end_time": "2025-09-26T21:43:22.227426",
     "exception": false,
     "start_time": "2025-09-26T21:43:22.216073",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "010e3e17",
   "metadata": {
    "papermill": {
     "duration": 0.001343,
     "end_time": "2025-09-26T21:43:22.230558",
     "exception": false,
     "start_time": "2025-09-26T21:43:22.229215",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1f16c3e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T21:43:22.234309Z",
     "iopub.status.busy": "2025-09-26T21:43:22.234133Z",
     "iopub.status.idle": "2025-09-26T21:43:22.358661Z",
     "shell.execute_reply": "2025-09-26T21:43:22.357073Z"
    },
    "papermill": {
     "duration": 0.128454,
     "end_time": "2025-09-26T21:43:22.360370",
     "exception": false,
     "start_time": "2025-09-26T21:43:22.231916",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91d6aefd",
   "metadata": {
    "papermill": {
     "duration": 0.001785,
     "end_time": "2025-09-26T21:43:22.366736",
     "exception": false,
     "start_time": "2025-09-26T21:43:22.364951",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5431fa5e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T21:43:22.372854Z",
     "iopub.status.busy": "2025-09-26T21:43:22.372491Z",
     "iopub.status.idle": "2025-09-26T21:43:22.522711Z",
     "shell.execute_reply": "2025-09-26T21:43:22.522227Z"
    },
    "papermill": {
     "duration": 0.156377,
     "end_time": "2025-09-26T21:43:22.525013",
     "exception": false,
     "start_time": "2025-09-26T21:43:22.368636",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.995558,
   "end_time": "2025-09-26T21:43:23.075882",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2025-09-26T21:43:19.080324",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}