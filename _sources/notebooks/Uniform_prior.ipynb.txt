{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c76a0863",
   "metadata": {
    "papermill": {
     "duration": 0.002428,
     "end_time": "2025-09-26T18:53:53.206322",
     "exception": false,
     "start_time": "2025-09-26T18:53:53.203894",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5ca3ce7d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:53:53.210651Z",
     "iopub.status.busy": "2025-09-26T18:53:53.210448Z",
     "iopub.status.idle": "2025-09-26T18:53:55.451619Z",
     "shell.execute_reply": "2025-09-26T18:53:55.449330Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.249548,
     "end_time": "2025-09-26T18:53:55.457097",
     "exception": false,
     "start_time": "2025-09-26T18:53:53.207549",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "17b63f80",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:53:55.466424Z",
     "iopub.status.busy": "2025-09-26T18:53:55.466074Z",
     "iopub.status.idle": "2025-09-26T18:53:55.469060Z",
     "shell.execute_reply": "2025-09-26T18:53:55.468310Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.007935,
     "end_time": "2025-09-26T18:53:55.470650",
     "exception": false,
     "start_time": "2025-09-26T18:53:55.462715",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dd4bbc1d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:53:55.473622Z",
     "iopub.status.busy": "2025-09-26T18:53:55.473418Z",
     "iopub.status.idle": "2025-09-26T18:53:55.476174Z",
     "shell.execute_reply": "2025-09-26T18:53:55.475532Z"
    },
    "papermill": {
     "duration": 0.006303,
     "end_time": "2025-09-26T18:53:55.478042",
     "exception": false,
     "start_time": "2025-09-26T18:53:55.471739",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "50301949",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:53:55.480948Z",
     "iopub.status.busy": "2025-09-26T18:53:55.480796Z",
     "iopub.status.idle": "2025-09-26T18:53:55.484602Z",
     "shell.execute_reply": "2025-09-26T18:53:55.483819Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.007786,
     "end_time": "2025-09-26T18:53:55.486882",
     "exception": false,
     "start_time": "2025-09-26T18:53:55.479096",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7853be67",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001287,
     "end_time": "2025-09-26T18:53:55.489253",
     "exception": false,
     "start_time": "2025-09-26T18:53:55.487966",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d515a7ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:53:55.492342Z",
     "iopub.status.busy": "2025-09-26T18:53:55.492166Z",
     "iopub.status.idle": "2025-09-26T18:53:55.501605Z",
     "shell.execute_reply": "2025-09-26T18:53:55.500061Z"
    },
    "papermill": {
     "duration": 0.012904,
     "end_time": "2025-09-26T18:53:55.503194",
     "exception": false,
     "start_time": "2025-09-26T18:53:55.490290",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c55ae29",
   "metadata": {
    "papermill": {
     "duration": 0.001191,
     "end_time": "2025-09-26T18:53:55.505815",
     "exception": false,
     "start_time": "2025-09-26T18:53:55.504624",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9405122f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:53:55.508961Z",
     "iopub.status.busy": "2025-09-26T18:53:55.508774Z",
     "iopub.status.idle": "2025-09-26T18:53:55.604198Z",
     "shell.execute_reply": "2025-09-26T18:53:55.603809Z"
    },
    "papermill": {
     "duration": 0.098322,
     "end_time": "2025-09-26T18:53:55.605356",
     "exception": false,
     "start_time": "2025-09-26T18:53:55.507034",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfde9e78",
   "metadata": {
    "papermill": {
     "duration": 0.003957,
     "end_time": "2025-09-26T18:53:55.610951",
     "exception": false,
     "start_time": "2025-09-26T18:53:55.606994",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3b80eacd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:53:55.616848Z",
     "iopub.status.busy": "2025-09-26T18:53:55.616705Z",
     "iopub.status.idle": "2025-09-26T18:53:55.775459Z",
     "shell.execute_reply": "2025-09-26T18:53:55.772708Z"
    },
    "papermill": {
     "duration": 0.166011,
     "end_time": "2025-09-26T18:53:55.778515",
     "exception": false,
     "start_time": "2025-09-26T18:53:55.612504",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.854784,
   "end_time": "2025-09-26T18:53:56.313554",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2025-09-26T18:53:52.458770",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}