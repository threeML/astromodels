{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fde30229",
   "metadata": {
    "papermill": {
     "duration": 0.001471,
     "end_time": "2025-10-02T21:52:07.554952",
     "exception": false,
     "start_time": "2025-10-02T21:52:07.553481",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "87dcafd2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T21:52:07.558029Z",
     "iopub.status.busy": "2025-10-02T21:52:07.557856Z",
     "iopub.status.idle": "2025-10-02T21:52:09.773787Z",
     "shell.execute_reply": "2025-10-02T21:52:09.773075Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 2.219119,
     "end_time": "2025-10-02T21:52:09.775295",
     "exception": false,
     "start_time": "2025-10-02T21:52:07.556176",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3f52fe76",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T21:52:09.778834Z",
     "iopub.status.busy": "2025-10-02T21:52:09.778437Z",
     "iopub.status.idle": "2025-10-02T21:52:09.781344Z",
     "shell.execute_reply": "2025-10-02T21:52:09.780832Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.00616,
     "end_time": "2025-10-02T21:52:09.782836",
     "exception": false,
     "start_time": "2025-10-02T21:52:09.776676",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "85a4f260",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T21:52:09.785860Z",
     "iopub.status.busy": "2025-10-02T21:52:09.785678Z",
     "iopub.status.idle": "2025-10-02T21:52:09.788147Z",
     "shell.execute_reply": "2025-10-02T21:52:09.787615Z"
    },
    "papermill": {
     "duration": 0.005381,
     "end_time": "2025-10-02T21:52:09.789464",
     "exception": false,
     "start_time": "2025-10-02T21:52:09.784083",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "aaacf73e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T21:52:09.792773Z",
     "iopub.status.busy": "2025-10-02T21:52:09.792566Z",
     "iopub.status.idle": "2025-10-02T21:52:09.796570Z",
     "shell.execute_reply": "2025-10-02T21:52:09.795823Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.007218,
     "end_time": "2025-10-02T21:52:09.797952",
     "exception": false,
     "start_time": "2025-10-02T21:52:09.790734",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a3b6a00",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001119,
     "end_time": "2025-10-02T21:52:09.800387",
     "exception": false,
     "start_time": "2025-10-02T21:52:09.799268",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e239430f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T21:52:09.803887Z",
     "iopub.status.busy": "2025-10-02T21:52:09.803702Z",
     "iopub.status.idle": "2025-10-02T21:52:09.809329Z",
     "shell.execute_reply": "2025-10-02T21:52:09.808828Z"
    },
    "papermill": {
     "duration": 0.009337,
     "end_time": "2025-10-02T21:52:09.810910",
     "exception": false,
     "start_time": "2025-10-02T21:52:09.801573",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb41a1da",
   "metadata": {
    "papermill": {
     "duration": 0.001259,
     "end_time": "2025-10-02T21:52:09.813679",
     "exception": false,
     "start_time": "2025-10-02T21:52:09.812420",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "41179b59",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T21:52:09.816899Z",
     "iopub.status.busy": "2025-10-02T21:52:09.816727Z",
     "iopub.status.idle": "2025-10-02T21:52:09.977569Z",
     "shell.execute_reply": "2025-10-02T21:52:09.977030Z"
    },
    "papermill": {
     "duration": 0.16416,
     "end_time": "2025-10-02T21:52:09.979052",
     "exception": false,
     "start_time": "2025-10-02T21:52:09.814892",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69e7f84b",
   "metadata": {
    "papermill": {
     "duration": 0.001644,
     "end_time": "2025-10-02T21:52:09.982944",
     "exception": false,
     "start_time": "2025-10-02T21:52:09.981300",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "609949ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T21:52:09.995807Z",
     "iopub.status.busy": "2025-10-02T21:52:09.991493Z",
     "iopub.status.idle": "2025-10-02T21:52:10.208988Z",
     "shell.execute_reply": "2025-10-02T21:52:10.208175Z"
    },
    "papermill": {
     "duration": 0.225471,
     "end_time": "2025-10-02T21:52:10.210253",
     "exception": false,
     "start_time": "2025-10-02T21:52:09.984782",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3.721339,
   "end_time": "2025-10-02T21:52:10.743123",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2025-10-02T21:52:07.021784",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}