{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "db9b28a0",
   "metadata": {
    "papermill": {
     "duration": 0.010716,
     "end_time": "2025-09-26T18:35:02.316118",
     "exception": false,
     "start_time": "2025-09-26T18:35:02.305402",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Uniform prior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4e427640",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:35:02.329307Z",
     "iopub.status.busy": "2025-09-26T18:35:02.328693Z",
     "iopub.status.idle": "2025-09-26T18:35:04.036408Z",
     "shell.execute_reply": "2025-09-26T18:35:04.035873Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 1.715376,
     "end_time": "2025-09-26T18:35:04.037743",
     "exception": false,
     "start_time": "2025-09-26T18:35:02.322367",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "from astromodels.functions.function import _known_functions\n",
    "\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "89153ab0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:35:04.040875Z",
     "iopub.status.busy": "2025-09-26T18:35:04.040578Z",
     "iopub.status.idle": "2025-09-26T18:35:04.042626Z",
     "shell.execute_reply": "2025-09-26T18:35:04.042237Z"
    },
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.004701,
     "end_time": "2025-09-26T18:35:04.043670",
     "exception": false,
     "start_time": "2025-09-26T18:35:04.038969",
     "status": "completed"
    },
    "tags": [
     "parameters"
    ]
   },
   "outputs": [],
   "source": [
    "func_name = \"TbAbs\"\n",
    "\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "239713e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:35:04.046165Z",
     "iopub.status.busy": "2025-09-26T18:35:04.046036Z",
     "iopub.status.idle": "2025-09-26T18:35:04.053133Z",
     "shell.execute_reply": "2025-09-26T18:35:04.052728Z"
    },
    "papermill": {
     "duration": 0.009535,
     "end_time": "2025-09-26T18:35:04.054216",
     "exception": false,
     "start_time": "2025-09-26T18:35:04.044681",
     "status": "completed"
    },
    "tags": [
     "injected-parameters"
    ]
   },
   "outputs": [],
   "source": [
    "# Parameters\n",
    "func_name = \"Uniform_prior\"\n",
    "positive_prior = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "74ee48e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:35:04.056751Z",
     "iopub.status.busy": "2025-09-26T18:35:04.056631Z",
     "iopub.status.idle": "2025-09-26T18:35:04.064402Z",
     "shell.execute_reply": "2025-09-26T18:35:04.064002Z"
    },
    "lines_to_next_cell": 0,
    "nbsphinx": "hidden",
    "papermill": {
     "duration": 0.010295,
     "end_time": "2025-09-26T18:35:04.065571",
     "exception": false,
     "start_time": "2025-09-26T18:35:04.055276",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "func = _known_functions[func_name]()\n",
    "\n",
    "if not positive_prior:\n",
    "\n",
    "\tenergy_grid = np.linspace(-5,5,1000)\n",
    "\n",
    "else:\n",
    "    \n",
    "    energy_grid = np.linspace(0,1,1000)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "blue = \"#4152E3\"\n",
    "red = \"#E3414B\"\n",
    "green = \"#41E39E\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81acc48b",
   "metadata": {
    "lines_to_next_cell": 0,
    "papermill": {
     "duration": 0.001007,
     "end_time": "2025-09-26T18:35:04.067646",
     "exception": false,
     "start_time": "2025-09-26T18:35:04.066639",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b6ee455f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:35:04.070127Z",
     "iopub.status.busy": "2025-09-26T18:35:04.070003Z",
     "iopub.status.idle": "2025-09-26T18:35:04.073990Z",
     "shell.execute_reply": "2025-09-26T18:35:04.073591Z"
    },
    "papermill": {
     "duration": 0.006423,
     "end_time": "2025-09-26T18:35:04.075043",
     "exception": false,
     "start_time": "2025-09-26T18:35:04.068620",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "  * description: A function which is constant on the interval lower_bound - upper_bound\n",
       "    * and 0 outside the interval. The extremes of the interval are counted as part of\n",
       "    * the interval.\n",
       "  * formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound}\n",
       "    * \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$\n",
       "  * parameters:\n",
       "    * lower_bound:\n",
       "      * value: 0.0\n",
       "      * desc: Lower bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * upper_bound:\n",
       "      * value: 1.0\n",
       "      * desc: Upper bound for the interval\n",
       "      * min_value: -.inf\n",
       "      * max_value: .inf\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true\n",
       "    * value:\n",
       "      * value: 1.0\n",
       "      * desc: Value in the interval\n",
       "      * min_value: null\n",
       "      * max_value: null\n",
       "      * unit: ''\n",
       "      * is_normalization: false\n",
       "      * delta: 0.1\n",
       "      * free: true"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "func.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52487ffe",
   "metadata": {
    "papermill": {
     "duration": 0.001097,
     "end_time": "2025-09-26T18:35:04.077334",
     "exception": false,
     "start_time": "2025-09-26T18:35:04.076237",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Shape \n",
    "\n",
    "The shape of the function. \n",
    "\n",
    "*If this is not a photon model but a prior or linear function then ignore the units as these docs are auto-generated*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fd76836a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:35:04.080101Z",
     "iopub.status.busy": "2025-09-26T18:35:04.079966Z",
     "iopub.status.idle": "2025-09-26T18:35:04.150787Z",
     "shell.execute_reply": "2025-09-26T18:35:04.150467Z"
    },
    "papermill": {
     "duration": 0.073543,
     "end_time": "2025-09-26T18:35:04.151964",
     "exception": false,
     "start_time": "2025-09-26T18:35:04.078421",
     "status": "completed"
    },
    "tags": [
     "nbsphinx-thumbnail"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'probability')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.plot(energy_grid, func(energy_grid), color=blue, lw=3)\n",
    "\n",
    "ax.set_xlabel(\"x\")\n",
    "ax.set_ylabel(\"probability\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5cbe48f",
   "metadata": {
    "papermill": {
     "duration": 0.001429,
     "end_time": "2025-09-26T18:35:04.154975",
     "exception": false,
     "start_time": "2025-09-26T18:35:04.153546",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Number Generation\n",
    "\n",
    "This is how we can generate random numbers from the prior.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e46035ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-26T18:35:04.158353Z",
     "iopub.status.busy": "2025-09-26T18:35:04.158221Z",
     "iopub.status.idle": "2025-09-26T18:35:04.256364Z",
     "shell.execute_reply": "2025-09-26T18:35:04.255936Z"
    },
    "papermill": {
     "duration": 0.101121,
     "end_time": "2025-09-26T18:35:04.257441",
     "exception": false,
     "start_time": "2025-09-26T18:35:04.156320",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'N')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "u = np.random.uniform(0,1, size=5000)\n",
    "\n",
    "draws = [func.from_unit_cube(x) for x in u]\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "ax.hist(draws, color=green, bins=50)\n",
    "\n",
    "ax.set_xlabel(\"value\")\n",
    "ax.set_ylabel(\"N\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2.892813,
   "end_time": "2025-09-26T18:35:04.591378",
   "environment_variables": {},
   "exception": null,
   "input_path": "Uniform_prior.ipynb",
   "output_path": "/Users/runner/work/astromodels/astromodels/docs/notebooks/Uniform_prior.ipynb",
   "parameters": {
    "func_name": "Uniform_prior",
    "positive_prior": false
   },
   "start_time": "2025-09-26T18:35:01.698565",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}