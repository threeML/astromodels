{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5bb63892",
   "metadata": {},
   "source": [
    "# Priors for Bayesian analysis\n",
    "\n",
    "Astromodels supports the definition of priors for all parameters in\n",
    "your model. You can use as prior any function (although of course not\n",
    "all functions should be used this way, but the choice is up to you).\n",
    "\n",
    "First let’s define a simple model containing one point source (see the\n",
    "“Model tutorial” for more info):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2961f43a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T20:50:23.850488Z",
     "iopub.status.busy": "2025-10-01T20:50:23.850293Z",
     "iopub.status.idle": "2025-10-01T20:50:26.234346Z",
     "shell.execute_reply": "2025-10-01T20:50:26.233584Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "from astromodels import *\n",
    "\n",
    "# Create a point source named \"pts1\"\n",
    "pts1 = PointSource('pts1',ra=125.23, dec=17.98, spectral_shape=Powerlaw())\n",
    "\n",
    "# Create the model\n",
    "my_model = Model(pts1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c505af7",
   "metadata": {},
   "source": [
    "Now let’s assign uniform priors to the parameters of the powerlaw\n",
    "function. The function uniform_prior is defined like this:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2877bc39",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T20:50:26.238010Z",
     "iopub.status.busy": "2025-10-01T20:50:26.237624Z",
     "iopub.status.idle": "2025-10-01T20:50:26.248085Z",
     "shell.execute_reply": "2025-10-01T20:50:26.247539Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<ul>\n",
       "\n",
       "<li>description: A function which is constant on the interval lower_bound - upper_bound and 0 outside the interval. The extremes of the interval are counted as part of the interval.</li>\n",
       "\n",
       "<li>formula: $ f(x)=\\begin{cases}0 & x < \\text{lower_bound} \\\\\\text{value} & \\text{lower_bound} \\le x \\le \\text{upper_bound} \\\\ 0 & x > \\text{upper_bound} \\end{cases}$</li>\n",
       "\n",
       "<li>default parameters: \n",
       "<ul>\n",
       "\n",
       "<li>lower_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 0.0</li>\n",
       "\n",
       "<li>desc: Lower bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>upper_bound: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Upper bound for the interval</li>\n",
       "\n",
       "<li>min_value: -inf</li>\n",
       "\n",
       "<li>max_value: inf</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "<li>value: \n",
       "<ul>\n",
       "\n",
       "<li>value: 1.0</li>\n",
       "\n",
       "<li>desc: Value in the interval</li>\n",
       "\n",
       "<li>min_value: None</li>\n",
       "\n",
       "<li>max_value: None</li>\n",
       "\n",
       "<li>unit: </li>\n",
       "\n",
       "<li>is_normalization: False</li>\n",
       "\n",
       "<li>delta: 0.1</li>\n",
       "\n",
       "<li>free: True</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n",
       "\n",
       "</li>\n",
       "\n",
       "</ul>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "Uniform_prior.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fc7dec0",
   "metadata": {},
   "source": [
    "We can use it as such:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e0a008ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T20:50:26.250124Z",
     "iopub.status.busy": "2025-10-01T20:50:26.249997Z",
     "iopub.status.idle": "2025-10-01T20:50:26.255206Z",
     "shell.execute_reply": "2025-10-01T20:50:26.253614Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Parameter K = 1.0 [1 / (keV s cm2)]\n",
       "(min_value = 1e-30, max_value = 1000.0, delta = 0.1, free = True) [prior: Uniform_prior]"
      ],
      "text/plain": [
       "Parameter K = 1.0 [1 / (keV s cm2)]\n",
       "(min_value = 1e-30, max_value = 1000.0, delta = 0.1, free = True) [prior: Uniform_prior]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Set 'lower_bound' to 0, 'upper bound' to 10, and leave the 'value' parameter\n",
    "# to the default value\n",
    "pts1.spectrum.main.Powerlaw.K.prior = Uniform_prior(lower_bound = 0, upper_bound=10)\n",
    "\n",
    "# Display it\n",
    "pts1.spectrum.main.Powerlaw.K.display()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e449e68d",
   "metadata": {},
   "source": [
    "Now, lets's set a Gaussian prior on the spectral index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f63e9278",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T20:50:26.257322Z",
     "iopub.status.busy": "2025-10-01T20:50:26.257175Z",
     "iopub.status.idle": "2025-10-01T20:50:26.266438Z",
     "shell.execute_reply": "2025-10-01T20:50:26.265834Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "Parameter index = -2.01 []\n",
       "(min_value = -10.0, max_value = 10.0, delta = 0.20099999999999998, free = True) [prior: Gaussian]"
      ],
      "text/plain": [
       "Parameter index = -2.01 []\n",
       "(min_value = -10.0, max_value = 10.0, delta = 0.20099999999999998, free = True) [prior: Gaussian]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "pts1.spectrum.main.Powerlaw.index.prior = Gaussian(mu=-2, sigma=1)\n",
    "\n",
    "pts1.spectrum.main.Powerlaw.index.display()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8f56f756",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T20:50:26.269471Z",
     "iopub.status.busy": "2025-10-01T20:50:26.269286Z",
     "iopub.status.idle": "2025-10-01T20:50:26.851029Z",
     "shell.execute_reply": "2025-10-01T20:50:26.850336Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Prior')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's get 500 points uniformly distributed between -20 and 20\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "from jupyterthemes import jtplot\n",
    "jtplot.style(context=\"talk\", fscale=1, ticks=True, grid=False)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "random_points = np.random.uniform(-10,20,100)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.plot(random_points,pts1.spectrum.main.Powerlaw.K.prior(random_points), '.' )\n",
    "\n",
    "ax.set_ylim([-0.1,1.2])\n",
    "ax.set_xlabel(\"value of K\")\n",
    "ax.set_ylabel(\"Prior\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "24873d23",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T20:50:26.853227Z",
     "iopub.status.busy": "2025-10-01T20:50:26.853046Z",
     "iopub.status.idle": "2025-10-01T20:50:26.931580Z",
     "shell.execute_reply": "2025-10-01T20:50:26.930747Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Prior')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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2mlNHr9kyZIwYMCA8I53vKPgYwUAACh1JR0Aly5dGnr37h26dOnScCz+uWfPntkMYHMxAK5atSqMGDEivPLKK+GII44Il19+eRg4cGCbxzBs2LAW7xs9enQ49NBD2/y9AQAACqmk1wDGZi/V1dXbHO/WrVveRjCxBPSNN94IY8eODd/85jfDvvvum5WLxuMAAACpK+kZwB49eoS6urptjm/cuDG7r7nbb7897LPPPg2hMc78nXHGGeFHP/pRtnawLWbPnt3ifbHpjI6kAABAuSjpABjLP1evXp1tBZErA928eXN2rE+fPts8vnmzl9122y28853vzB4PAACQupIuAY17/9XX14cFCxY0HJs/f352LO4J2Hy9YHz83/72t4ZjW7ZsCU8//XQWAgEAAFJX0gEwlnnGhi4TJkzIgt8jjzySbQQ/atSobB1gbATz0ksvZY896KCDslnBeH8s2/zLX/6SlX2+/vrr4eMf/3ixfxQAAICi61Qfp9NK2IYNG8LEiRPDQw89lG3/MHz48DBmzJiw++67Z81e5s2bF2bNmpU9Nnb+vPHGG7MAGNcJxk3gr7zyyuxzR8itAezevXvo379/h/wdAAAA7ZVLSj4AljIBEAAAKKdcUtIloAAAALQfARAAACARAiAAAEAiBEAAAIBECIAAAACJEAABAAASIQACAAAkQgAEAABIhAAIAACQCAEQAAAgEQIgAABAIgRAAACARAiAAAAAiRAAAQAAEiEAAgAAJEIABAAASIQACAAAkAgBEAAAIBECIAAAQCIEQAAAgEQIgAAAAIkQAAEAABIhAAIAACRCAAQAAEiEAAgAAJAIARAAACARAiAAAEAiBEAAAIBECIAAAACJEAABAAASIQACAAAkQgAEAABIhAAIAACQCAEQAAAgEQIgAABAIgRAAACARAiAAAAAiRAAAQAAEiEAAgAAJEIABAAASIQACAAAkAgBEAAAIBECIAAAQCIEQAAAgEQIgAAAAIkQAAEAABIhAAIAACRCAAQAAEiEAAgAAJAIARAAACARAiAAAEAiBEAAAIBECIAAAACJEAABAAASIQACAAAkQgAEAABIhAAIAACQCAEQAAAgEQIgAABAIgRAAACARAiAAAAAiRAAAQAAEiEAAgAAJEIABAAASIQACAAAkAgBEAAAIBECIAAAQCIEQAAAgEQIgAAAAIkQAAEA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vUJdXd02P1wsuywFAwYMCKXiwgsv3GFgpf0434XlfBeW8114znlhOd+F5XwXlvNdWBeW4fkuagCMWzVcddVVLd4fyz9XrFjR5NjLL78campqCjA6AACAylLUAHjmmWdmHy2ZPHly+OMf/5ht/ZATb5944okFGiEAAEDlKOltID72sY9l6+xiZ8+nn346fPWrX80+jxo1Krt/8+bN4cUXXwzr1q0r9lABAABKXkkHwEMOOSRMnTo1/OY3v8lC34IFC8Kdd94ZDjzwwOz+lStXhlNOOSX89re/LfZQAQAASl5JdwGNTjrppOwjn759+7a44fvnP//57AMAAID/1qm+vr7+f/4MAABABSvpElAAAADajwAIAACQCAEQAAAgEQIgAABAIgRAAACARAiAAAAAiRAAAQAAEiEAAgAAJEIABAAASIQACAAAkAgBEAAAIBECIAAAQCIEQAAAgEQIgGVu48aN4bTTTgs33HDDdh+3ePHicPbZZ4dBgwaFU045Jdx///0FG2Ml+L//9/+G97///dn5GzFiRPj1r39d7CFVtJ093y+99FK48MILwzHHHBPe9773hTvvvLNgY60UP/vZz8Lpp58ejjrqqHDSSSeFKVOmhK1btxZ7WBVrZ8+353j7+MpXvrLD35cU/nx7j7JrnnjiiTBy5MgwcODAMHz48PCHP/yh2EOqOJs2bQrjx48PQ4YMCYMHDw5XX311qK2tbfHxP/jBD7L3Me9617vC+eefH5YsWRJKiQBY5uKbhueee267j1m3bl244IILwiGHHBJ+9KMfhc997nPZk/iRRx4p2DjL2UMPPRRuvvnmcPHFF4cf//jH4YMf/GD44he/GBYuXNji14wePTocffTRTT6uuuqqgo47lfMd3zRfcsklYbfddgvf//73w7XXXhu+/e1vhx/+8IcFH3u5evzxx8OYMWOyNw4//elPw+WXXx6+973vZR8t8Rwv3Pn2HN91W7ZsCY8++mirg8XHPvaxbZ7ft912W4ePM8Xz7T3Krlm+fHm49NJLswtJP/nJT8JZZ50VLrvssixUt8Tr986bNGlSmDNnTva+e9q0adn5HTduXIvvY2666absPN93331h//33z57jdXV1oVRUFXsAtF18Q/yLX/wivPOd79zhlebOnTtnV+F233330L9//zB37tzszcPJJ59csPGWqwceeCC7Uj9q1Kjs9hFHHBF+//vfh1mzZoVjjz0279f84x//yH6Bxav1OXvttVfBxpzS+X7sscfCiy++GO65556wzz77hAEDBoRzzjkne35/4hOfKMJPUH7im4Zhw4ZlISN3zuPVynvvvTe7cpmP53jhzrfn+K6Js6ennnpqdgW/Nerr67Pn9+233x5qamoajr/tbW/rwFGme769R9k18Twddthh2YWk6PDDD89+X8YLqNddd13er/H6vXPWrl0bpk+fHqZOnRqGDh2aHYuB+dxzzw1r1qwJvXr1avL4u+66K3zqU5/KZmWjL3/5y+E973lPNjMb/22UAjOAZWrDhg3Zky9efdjRL6X4QhqfsPGFNSdOYceSAXZszz33zM5XY1VVVS1eyYlXPpcuXZpdjXvHO97R8NG7d+8Cjbi87ez5js/jWPYS3xjnxK+Pv+DiCzM7FstYYklLYz179gyvvPJK3sd7jhf2fHuO75r99tsvezP84IMPZuF5R1auXJnNup5wwglNnt/x/xHtf769R9k18fzF1+LGjj/++BbPn9fvnZerQMqFvyiWK8f3JvH8N5/Rfuqpp5r8P6murs5ew0vpOW0GsEzdcsst2VXjj3zkIzssA1q2bFlWRtdYnI6Ob6jjEzW+4aZlX//61xv+HN8UPPzww9nUf+5qW75yjOirX/1q+NOf/hS6deuWrdOMZS1dunQp2LhTOd/x+d2vX79tnt/Rq6++us2VObb1zW9+s8nt+NoQZ2KPPPLIvI/3HC/s+fYc3zXxOfm//tf/yv7cvXv3HT4+zsbG2ZA4Q/u3v/0tC36xJDRe7Y9luLTv+fYeZde09PrQ0sUhr987LwbmGJAbn5/45/ja0Pw8x/Mb37vszP+TYhAAy1C82hCbYvzyl79s9dXmPfbYo8mx+A8+d58X19aZOXNm+PznP59dPYtlKccdd1zexz3//PPZY2JpbnwD8eyzz4Ybb7wxrFq1Kqshp33Pd3wO77vvvi0+v9k5f//738PYsWOzN8EtrUnzHC/s+fYcL6z4/I4lX7HZzn/8x3+EP//5z9m65BhG4toq2pf3KO1//mLwbum1wev3zovnMs7iNRefp83Pc+5288fHxwqAbNebb77ZYilQvKoQSz+vueaaVpejxCuZzcvnYvfQaO+99w6p2975jg499NDQqVOnrH47Nmx45plnshfLlrqbxdKLuHg9V04Rr4TGMoErrrgiK9lN/ZdZe59vz+/2OefxDcGtt96arV046KCDsmYjsTFAPp7jhT3fnuPt85rSWrHzcJwRyf2OjTOzMfx95zvfEQA74Hx7fu/a+W7p/PXo0SPv471+77x4LvMtQ8l3nnO341KtxuKa2Jb+nxSDAFiCZsyYscNuTLGDXPyI3nrrrWwaPy5QjR2Kmi/kjf/IV6xY0eTYyy+/nP1yy3dFIzU7Ot+xk1Os5Y7nK75Qxo9YdnX33XfnDSTxylvzspe4qD02Fogv4qm/uLb3+Y7P7ziL0vz5HZsK5MrkUrejcx5fP2L5z5NPPhm+8IUvZI1ItlcK5Dle2PPtOb5r5zuu32lNKWJOvjdp8fn9xhtvZG/4ms+2pKa9z7f3KLt2vmOpYb7z17iBUWNev3defI6uXr06C3G51+rNmzdnx/r06bPNGtjc/4O+ffs2HI+3WyrzLwYBsASdeeaZ2Uc+8ckX670bi0Ewtk+ObYDzvejGN9Nxz6h4xTm+YYj++Mc/hhNPPLGDfoLKOd/xH3jcwyXOuOa6Uub+P7S07iZ23YrlQ7FVcM5f/vKX0LVr121qwlPU3uc71/o6XiXNXfyIz++4QNsvsh2f8+iOO+7InqOxy2Q8bzviOV7Y8+05vmvne2fF/RZjeVzuImsU/3/FmdrUw19HnG/vUXbtfE+ePDk7X41np7d3/rx+77zYlCgG5AULFmTNoaL58+dnx5o39IrNumLDl9mzZzfcFysIFi1aFD772c+GUmE1c5mJVx4ad22KH/EfbbxiGf8cF6jHaerYMjw3XR1LWeJUdGxDG8vpvvWtb4Vf/epX4bzzziv2j1PyYllE3Ksr7v8U93WJtfJxpjWWbX384x9vCC3xfMd/4FFcr/bb3/42+5qnn346O9fxBTpe5W/c5Yz2Od/xl9wBBxyQraOK5zvuIxX3SPvMZz5T5J+mfMQ1xfG8x19c8dw2/og8x4t7vj3HO1bz35nx+R03cY5lufF3Zjzf8TXooosuKvZQK4L3KO0rNiiKXSdzr8exuUv8nLuI6vV71/Xo0SMrDZ8wYUIW/GIJbdwIPp7j3Nq+uP1Jzic/+clsTXd8rY9riGM/gzhRE5e2lIx6yt6nPvWp+i9/+csNt5944on6ww8/PPuc89e//rX+f//v/11/1FFH1Z966qn1M2bMKNJoy09tbW39hAkT6t/3vvfVDxo0qP6MM86ov+++++q3bt2a3b9s2bLsfP/0pz9t+JoHH3yw/vTTT8/O98knn1z/9a9/vf6tt94q4k9R2ed76dKl9eedd1790UcfXf/+97+//kc/+lERf4LyE89zPKf5PiLP8eKfb8/xjvl92dLvzO9+97v1H/rQh+oHDBhQ/+EPfzi7Tcedb+9Rds2jjz6a/a6Mrw8f/ehH6+fPn99wn9fv9rF+/fr6cePG1R977LH1xx9/fPY+ZdOmTdl9Y8aMyV6XG7vrrrvqhw0blr3ef/azn61fuXJlfSnpFP9T7BAKAABAx1MCCgAAkAgBEAAAIBECIAAAQCIEQAAAgEQIgAAAAIkQAAEAABIhAAIAACRCAAQAAEiEAAgAbTB37txwxBFHhDlz5oRS8fjjj4ePfOQjYcCAAeGll17K+5hzzjknnH322dscf+2118Lw4cPDUUcdFR566KECjBaAYqgqyt8KALS773znO1mQmzJlSujVq1ervy5+zXnnnReWLFmSfe2HPvShDh0nAMUjAAJAhairqwsHH3xw+PCHP7xT4e/8888PL774Ypg6dWo4+eSTO3SMABSXElAAkvKZz3wmDB48OLz11ltNjl911VXh3e9+d9i4cWN2e8aMGeFjH/tYOOaYY8KQIUPCpz/96bBgwYIWv+/YsWPDe9/73ibHli9fnpWJTp8+veHYhg0bwte+9rXssQMHDgz/9m//FmbNmrXDcb/wwgvhsssuy8Y4aNCg8KlPfSorQ82Jf8+8efPCokWLsj/Hv7u14W/p0qXhW9/6lvAHkAABEICkxHVua9euzcJSTgyDM2fODKeeemrYY489wpNPPhm+8IUvhIMOOihMmjQpC3f//Oc/wwUXXBBef/31Nv/dW7ZsCRdffHF44IEHsiB68803Z3/HpZdeGn7961+3+HUrVqwIH//4x8Nzzz0XLr/88ixA7rnnnll4e+SRR7LH3HnnneHwww8P73znO7M/77vvvtsdS/x54tc///zz2eOHDh3a5p8LgPKhBBSApMTyyOuvvz6b4TvxxBMbmqe88cYb4V//9V+z23//+9/DsccemwW0Tp06ZccOOOCALDA9++yz2YxgW8TmKnHW7r777stmFqNTTjklC2Nx7d1pp52W9+tiaWacmfz+97/fsLYvhtU4QxnHGGfu4oxiDHKbN2/eZiayuTfffLPhZ4leffXVNv08AJQfM4AAJCXOnH3gAx8Iv/vd70J9fX127De/+U3o06dPVl4ZxbLMH/zgB2HdunXhb3/7W3b/vffe2zCL11Zxtm7//ffPZupqa2sbPmJgi2vw1qxZk/frZs+enYW8xo1dYjCNzVpiWI3j3Bn/+Mc/wsqVK8O3v/3tsN9++4Xx48eHl19+uc0/FwDlwwwgAMkZMWJEVnIZSz2PPvroLAzGrRFys33Lli0L1157bTZb17Nnz6yxyoEHHrjTf08uYObEmbZVq1Zls4v5xJnAfN0749fV1NTkDbNRDJG5P7fG3nvvHe6+++7Qv3//rMT1oosuCldeeWV2bLfdXBsGqGQCIADJGTZsWHjb296WlYHG8BTX9eXKP6MxY8Zks3Fx5i+u0Yvifn+//OUvW/yeufDYWPP1gnvttVfDusJ88oW8KIa72LClubjX3+677579LDvjHe94Rxb+opNOOil84hOfyGY8YwlpXKMIQOVymQ+A5MTQFDdMjzN/MeTFbpxvf/vbG+5/5plnsmCUC3/RjjZ879atWxYmG8/6zZ8/v8ljjj/++GwGMH7fWG6a+1i4cGG2zq+6ujrv9z7uuOPCH/7whyalnrFxTRx7XI/YpUuXsCvi7F/8+W+99dbw17/+dZe+FwClTQAEINluoHHd3c9+9rMwcuTIJvfFstCf//znWbOW2LglBqQYtnINY/LNxsWQFgPaHXfckYW83//+91lJZWNnnXVW6Nu3b9YBNG4NEb/3NddcE77+9a+H973vfS2WX8btH9avXx/OOeec7Osefvjh8LnPfS6sXr06jB49epfPRQyekydPzsLrFVdckf1dAFQmARCAJMV1eP369Qtbt27NZgMbiyWaMQTeeOON4atf/Wq2DvD+++/PuobGUBfXCDYXv8cll1ySdeqMnT2nTZuWbdfQWNeuXbP7jzrqqCxwxVLTv/zlL+ErX/lKOO+881oc65FHHpn9vbEUND427lkYN33/7ne/m81etof488ZQGfcbnDhxYrt8TwBKT6f65ivUAQAAqEhmAAEAABIhAAIAACRCAAQAAEiEAAgAAJAIARAAACARAiAAAEAiBEAAAIBECIAAAACJEAABAAASIQACAAAkQgAEAAAIafj/ATJhrZv26a18AAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1040x910 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "random_points = np.random.uniform(-4,0,100)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.plot(random_points,pts1.spectrum.main.Powerlaw.index.prior(random_points), 'r.' )\n",
    "\n",
    "ax.set_ylim([-0.1,0.6])\n",
    "ax.set_xlabel(\"value of K\")\n",
    "ax.set_ylabel(\"Prior\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fa818184",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
